import React, { useState } from "react"
import StaticAndDynamicOutputRow from "./StaticAndDynamicOutputRow"
import useStore from "../../store/useStore"
import useVerweiseStore from "../../store/useVerweiseStore" 
import calcLogic from "../HomeScreenComps/calcLogic"
import convertLogic from "../HomeScreenComps/convertLogic"
import complicatedData from "../Data/complicatedData"

import nonStateOutputStore from "../../nonStateStore/useOutputStore"

const FinalOutputSection = props => {
    const state = convertLogic.stateToFloat(useStore())
    const bhkwState = useVerweiseStore(state => state.BHKWStromKW)

    const [highlitedRow, setHighlitedRow] = useState("")
    const [highlitedCol, setHighlitedCol] = useState(null)

    const checkIfValid = (calc) => {
        if (parseFloat(calc)) {
            return parseFloat(calc)
        }
        return 0
    }

    const checkIfDefined = (calculation, doRound) => {
        return  ((calculation) ? (doRound ? Math.round((calculation)) : (Math.round((calculation) *100))/100) : "0")
    }

    
    
    return (
        <div className="border-2 border-black rounded-md mt-2 p-1">
            <StaticAndDynamicOutputRow bold={true} highlitedCol={highlitedCol}  setHighlitedCol={setHighlitedCol} rowName="Betriebsjahr" valueArray={[2021,2022,2023,2024,2025,2026,2027,2028,2029]}/>

            <StaticAndDynamicOutputRow highlitedCol={highlitedCol} highlitedRow={highlitedRow} setHighlitedRow={setHighlitedRow} rowName="Betriebsstunden BHKW [h/a]" valueArray={[
                Math.round(checkIfValid(state.BetriebsstundenBHKW * 1)),
                Math.round(checkIfValid(state.BetriebsstundenBHKW * 2)),
                Math.round(checkIfValid(state.BetriebsstundenBHKW * 3)),
                Math.round(checkIfValid(state.BetriebsstundenBHKW * 4)),
                Math.round(checkIfValid(state.BetriebsstundenBHKW * 5)),
                Math.round(checkIfValid(state.BetriebsstundenBHKW * 6)),
                Math.round(checkIfValid(state.BetriebsstundenBHKW * 7)),
                Math.round(checkIfValid(state.BetriebsstundenBHKW * 8)),
                Math.round(checkIfValid(state.BetriebsstundenBHKW * 9)),

            ]}/>
            <StaticAndDynamicOutputRow highlitedCol={highlitedCol} highlitedRow={highlitedRow} setHighlitedRow={setHighlitedRow} rowName="maximal zuschlagsberechtigte Vollbenutzungstunden [h/a]" valueArray={[
                5000,
                5000,
                4000,
                4000,
                3500,
                3500,
                3500,
                3500,
                3500,
            ]}/>
            <StaticAndDynamicOutputRow highlitedCol={highlitedCol} highlitedRow={highlitedRow} setHighlitedRow={setHighlitedRow} rowName="verbrauchte zuschlagsberechtigte Betriebstunden [h/a]" valueArray={[
                Math.round(calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 5000, 1)),
                Math.round(calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 5000, 2)),
                Math.round(calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 4000, 3)),
                Math.round(calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 4000, 4)),
                Math.round(calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 3500, 5)),
                Math.round(calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 3500, 6)),
                Math.round(calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 3500, 7)),
                Math.round(calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 3500, 8)),
                Math.round(calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 3500, 9)),
            ]}/>
            <StaticAndDynamicOutputRow highlitedCol={highlitedCol} highlitedRow={highlitedRow} setHighlitedRow={setHighlitedRow} rowName="verbrauchte zuschlagsberechtigte kummulierte Betreibsstunden [h/a]" valueArray={[
                Math.round(calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 5000, 1)),
                Math.round(calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 5000, 1) + calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 5000, 2)),
                Math.round(calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 5000, 1) + calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 5000, 2) + calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 4000, 3)),
                Math.round(calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 5000, 1) + calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 5000, 2) + calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 4000, 3) + calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 4000, 4)),
                Math.round(calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 5000, 1) + calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 5000, 2) + calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 4000, 3) + calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 4000, 4) + calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 3500, 5)),
                Math.round(calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 5000, 1) + calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 5000, 2) + calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 4000, 3) + calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 4000, 4) + calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 3500, 5) + calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 3500, 6)),
                Math.round(calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 5000, 1) + calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 5000, 2) + calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 4000, 3) + calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 4000, 4) + calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 3500, 5) + calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 3500, 6) + calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 3500, 7)),
                Math.round(calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 5000, 1) + calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 5000, 2) + calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 4000, 3) + calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 4000, 4) + calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 3500, 5) + calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 3500, 6) + calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 3500, 7) + calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 3500, 8)),
                Math.round(calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 5000, 1) + calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 5000, 2) + calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 4000, 3) + calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 4000, 4) + calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 3500, 5) + calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 3500, 6) + calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 3500, 7) + calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 3500, 8) + calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 3500, 9)),
            ]} />
            <StaticAndDynamicOutputRow highlitedCol={highlitedCol} highlitedRow={highlitedRow} setHighlitedRow={setHighlitedRow} bold={true} rowName="Kosten/Erlöse Angbot Pacht-/ Betriebsführung" valueArray={[
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                9,
            ]} />
            <StaticAndDynamicOutputRow highlitedCol={highlitedCol} highlitedRow={highlitedRow} setHighlitedRow={setHighlitedRow} rowName="Annuität [€/a]" valueArray={[
                calcLogic.rmz(state.KapitalzinsDerFinazierendenBank/100, state.Finanzierungszeitraum, state.InvestitionLautAnbieter, 0,0) * (-1),
                calcLogic.rmz(state.KapitalzinsDerFinazierendenBank/100, state.Finanzierungszeitraum, state.InvestitionLautAnbieter, 0,0) * (-1),
                calcLogic.rmz(state.KapitalzinsDerFinazierendenBank/100, state.Finanzierungszeitraum, state.InvestitionLautAnbieter, 0,0) * (-1),
                calcLogic.rmz(state.KapitalzinsDerFinazierendenBank/100, state.Finanzierungszeitraum, state.InvestitionLautAnbieter, 0,0) * (-1),
                calcLogic.rmz(state.KapitalzinsDerFinazierendenBank/100, state.Finanzierungszeitraum, state.InvestitionLautAnbieter, 0,0) * (-1),
                calcLogic.rmz(state.KapitalzinsDerFinazierendenBank/100, state.Finanzierungszeitraum, state.InvestitionLautAnbieter, 0,0) * (-1),
                calcLogic.rmz(state.KapitalzinsDerFinazierendenBank/100, state.Finanzierungszeitraum, state.InvestitionLautAnbieter, 0,0) * (-1),
                calcLogic.rmz(state.KapitalzinsDerFinazierendenBank/100, state.Finanzierungszeitraum, state.InvestitionLautAnbieter, 0,0) * (-1),
                calcLogic.rmz(state.KapitalzinsDerFinazierendenBank/100, state.Finanzierungszeitraum, state.InvestitionLautAnbieter, 0,0) * (-1),
            ]} />
            <StaticAndDynamicOutputRow highlitedCol={highlitedCol} highlitedRow={highlitedRow} setHighlitedRow={setHighlitedRow} rowName="Vollwartung [€/a]" valueArray={[
                calcLogic.preisteigungsFunktion(state.BetriebsstundenBHKW * state.Vollwartung, state.PreissteigerungenWartungProA, 0),
                calcLogic.preisteigungsFunktion(state.BetriebsstundenBHKW * state.Vollwartung, state.PreissteigerungenWartungProA, 1),
                calcLogic.preisteigungsFunktion(state.BetriebsstundenBHKW * state.Vollwartung, state.PreissteigerungenWartungProA, 2),
                calcLogic.preisteigungsFunktion(state.BetriebsstundenBHKW * state.Vollwartung, state.PreissteigerungenWartungProA, 3),
                calcLogic.preisteigungsFunktion(state.BetriebsstundenBHKW * state.Vollwartung, state.PreissteigerungenWartungProA, 4),
                calcLogic.preisteigungsFunktion(state.BetriebsstundenBHKW * state.Vollwartung, state.PreissteigerungenWartungProA, 5),
                calcLogic.preisteigungsFunktion(state.BetriebsstundenBHKW * state.Vollwartung, state.PreissteigerungenWartungProA, 6),
                calcLogic.preisteigungsFunktion(state.BetriebsstundenBHKW * state.Vollwartung, state.PreissteigerungenWartungProA, 7),
                calcLogic.preisteigungsFunktion(state.BetriebsstundenBHKW * state.Vollwartung, state.PreissteigerungenWartungProA, 8),
                
            ]} />
            <StaticAndDynamicOutputRow highlitedCol={highlitedCol} highlitedRow={highlitedRow} setHighlitedRow={setHighlitedRow} rowName="Vollrevision bei ca. 30000 bh [€/a]" valueArray={complicatedData("VollrevisionDaten", state)} />
            <StaticAndDynamicOutputRow highlitedCol={highlitedCol} highlitedRow={highlitedRow} setHighlitedRow={setHighlitedRow} rowName="Brennstoff inkl. Steuer BHKW [€/a]" valueArray={[
                calcLogic.preisteigungsFunktion((state.BasisgaspreisInklAllerAbgabenNetto * checkIfDefined(bhkwState[state.elektrischeLeistung].brennstoffleistungKWHi * state.BetriebsstundenBHKW/1000 * 1.107, true)), state.SteigerungErdgasProA, 0),
                calcLogic.preisteigungsFunktion((state.BasisgaspreisInklAllerAbgabenNetto * checkIfDefined(bhkwState[state.elektrischeLeistung].brennstoffleistungKWHi * state.BetriebsstundenBHKW/1000 * 1.107, true)), state.SteigerungErdgasProA, 1),
                calcLogic.preisteigungsFunktion((state.BasisgaspreisInklAllerAbgabenNetto * checkIfDefined(bhkwState[state.elektrischeLeistung].brennstoffleistungKWHi * state.BetriebsstundenBHKW/1000 * 1.107, true)), state.SteigerungErdgasProA, 2),
                calcLogic.preisteigungsFunktion((state.BasisgaspreisInklAllerAbgabenNetto * checkIfDefined(bhkwState[state.elektrischeLeistung].brennstoffleistungKWHi * state.BetriebsstundenBHKW/1000 * 1.107, true)), state.SteigerungErdgasProA, 3),
                calcLogic.preisteigungsFunktion((state.BasisgaspreisInklAllerAbgabenNetto * checkIfDefined(bhkwState[state.elektrischeLeistung].brennstoffleistungKWHi * state.BetriebsstundenBHKW/1000 * 1.107, true)), state.SteigerungErdgasProA, 4),
                calcLogic.preisteigungsFunktion((state.BasisgaspreisInklAllerAbgabenNetto * checkIfDefined(bhkwState[state.elektrischeLeistung].brennstoffleistungKWHi * state.BetriebsstundenBHKW/1000 * 1.107, true)), state.SteigerungErdgasProA, 5),
                calcLogic.preisteigungsFunktion((state.BasisgaspreisInklAllerAbgabenNetto * checkIfDefined(bhkwState[state.elektrischeLeistung].brennstoffleistungKWHi * state.BetriebsstundenBHKW/1000 * 1.107, true)), state.SteigerungErdgasProA, 6),
                calcLogic.preisteigungsFunktion((state.BasisgaspreisInklAllerAbgabenNetto * checkIfDefined(bhkwState[state.elektrischeLeistung].brennstoffleistungKWHi * state.BetriebsstundenBHKW/1000 * 1.107, true)), state.SteigerungErdgasProA, 7),
                calcLogic.preisteigungsFunktion((state.BasisgaspreisInklAllerAbgabenNetto * checkIfDefined(bhkwState[state.elektrischeLeistung].brennstoffleistungKWHi * state.BetriebsstundenBHKW/1000 * 1.107, true)), state.SteigerungErdgasProA, 8),
                
            ]} />
            <StaticAndDynamicOutputRow highlitedCol={highlitedCol} highlitedRow={highlitedRow} setHighlitedRow={setHighlitedRow} rowName="Brennstoffbezug Kessel [€/a]" valueArray={[
                calcLogic.preisteigungsFunktion(state.BasisgaspreisInklAllerAbgabenNetto * calcLogic.brennstoffeinsatzImKessel(checkIfDefined(bhkwState[state.elektrischeLeistung].thermischeLeistung*state.BetriebsstundenBHKW/1000), checkIfDefined(state.GesamtbedarfErdgasFürHeizungUndWarmwasser/(1.107/state.JahresanlagennutzungsgradWärmeerzeuger * 100)), state.JahresanlagennutzungsgradWärmeerzeuger), state.SteigerungErdgasProA, 0),
                calcLogic.preisteigungsFunktion(state.BasisgaspreisInklAllerAbgabenNetto * calcLogic.brennstoffeinsatzImKessel(checkIfDefined(bhkwState[state.elektrischeLeistung].thermischeLeistung*state.BetriebsstundenBHKW/1000), checkIfDefined(state.GesamtbedarfErdgasFürHeizungUndWarmwasser/(1.107/state.JahresanlagennutzungsgradWärmeerzeuger * 100)), state.JahresanlagennutzungsgradWärmeerzeuger), state.SteigerungErdgasProA, 1),
                calcLogic.preisteigungsFunktion(state.BasisgaspreisInklAllerAbgabenNetto * calcLogic.brennstoffeinsatzImKessel(checkIfDefined(bhkwState[state.elektrischeLeistung].thermischeLeistung*state.BetriebsstundenBHKW/1000), checkIfDefined(state.GesamtbedarfErdgasFürHeizungUndWarmwasser/(1.107/state.JahresanlagennutzungsgradWärmeerzeuger * 100)), state.JahresanlagennutzungsgradWärmeerzeuger), state.SteigerungErdgasProA, 2),
                calcLogic.preisteigungsFunktion(state.BasisgaspreisInklAllerAbgabenNetto * calcLogic.brennstoffeinsatzImKessel(checkIfDefined(bhkwState[state.elektrischeLeistung].thermischeLeistung*state.BetriebsstundenBHKW/1000), checkIfDefined(state.GesamtbedarfErdgasFürHeizungUndWarmwasser/(1.107/state.JahresanlagennutzungsgradWärmeerzeuger * 100)), state.JahresanlagennutzungsgradWärmeerzeuger), state.SteigerungErdgasProA, 3),
                calcLogic.preisteigungsFunktion(state.BasisgaspreisInklAllerAbgabenNetto * calcLogic.brennstoffeinsatzImKessel(checkIfDefined(bhkwState[state.elektrischeLeistung].thermischeLeistung*state.BetriebsstundenBHKW/1000), checkIfDefined(state.GesamtbedarfErdgasFürHeizungUndWarmwasser/(1.107/state.JahresanlagennutzungsgradWärmeerzeuger * 100)), state.JahresanlagennutzungsgradWärmeerzeuger), state.SteigerungErdgasProA, 4),
                calcLogic.preisteigungsFunktion(state.BasisgaspreisInklAllerAbgabenNetto * calcLogic.brennstoffeinsatzImKessel(checkIfDefined(bhkwState[state.elektrischeLeistung].thermischeLeistung*state.BetriebsstundenBHKW/1000), checkIfDefined(state.GesamtbedarfErdgasFürHeizungUndWarmwasser/(1.107/state.JahresanlagennutzungsgradWärmeerzeuger * 100)), state.JahresanlagennutzungsgradWärmeerzeuger), state.SteigerungErdgasProA, 5),
                calcLogic.preisteigungsFunktion(state.BasisgaspreisInklAllerAbgabenNetto * calcLogic.brennstoffeinsatzImKessel(checkIfDefined(bhkwState[state.elektrischeLeistung].thermischeLeistung*state.BetriebsstundenBHKW/1000), checkIfDefined(state.GesamtbedarfErdgasFürHeizungUndWarmwasser/(1.107/state.JahresanlagennutzungsgradWärmeerzeuger * 100)), state.JahresanlagennutzungsgradWärmeerzeuger), state.SteigerungErdgasProA, 6),
                calcLogic.preisteigungsFunktion(state.BasisgaspreisInklAllerAbgabenNetto * calcLogic.brennstoffeinsatzImKessel(checkIfDefined(bhkwState[state.elektrischeLeistung].thermischeLeistung*state.BetriebsstundenBHKW/1000), checkIfDefined(state.GesamtbedarfErdgasFürHeizungUndWarmwasser/(1.107/state.JahresanlagennutzungsgradWärmeerzeuger * 100)), state.JahresanlagennutzungsgradWärmeerzeuger), state.SteigerungErdgasProA, 7),
                calcLogic.preisteigungsFunktion(state.BasisgaspreisInklAllerAbgabenNetto * calcLogic.brennstoffeinsatzImKessel(checkIfDefined(bhkwState[state.elektrischeLeistung].thermischeLeistung*state.BetriebsstundenBHKW/1000), checkIfDefined(state.GesamtbedarfErdgasFürHeizungUndWarmwasser/(1.107/state.JahresanlagennutzungsgradWärmeerzeuger * 100)), state.JahresanlagennutzungsgradWärmeerzeuger), state.SteigerungErdgasProA, 8),
            ]} />
            <StaticAndDynamicOutputRow highlitedCol={highlitedCol} highlitedRow={highlitedRow} setHighlitedRow={setHighlitedRow} rowName="Reststrombezug inkl. aller Abgaben [€/a]" valueArray={[
                calcLogic.preisteigungsFunktion((checkIfDefined((state.DurchschnittspreisBezug + state.Stromsteuer + state.EEGUmlage + state.KWKAufschlagCa + state.SonstigeAbgaben) * 10) * calcLogic.summeReststrombezug(state.GesamtbedarfStrom, checkIfDefined(state.elektrischeLeistung*state.BetriebsstundenBHKW/1000), checkIfDefined((state.elektrischeLeistung*state.BetriebsstundenBHKW/1000) * state.DavonInsNetzEingespeist/100))), state.SteigerungStromProA, 0),
                calcLogic.preisteigungsFunktion((checkIfDefined((state.DurchschnittspreisBezug + state.Stromsteuer + state.EEGUmlage + state.KWKAufschlagCa + state.SonstigeAbgaben) * 10) * calcLogic.summeReststrombezug(state.GesamtbedarfStrom, checkIfDefined(state.elektrischeLeistung*state.BetriebsstundenBHKW/1000), checkIfDefined((state.elektrischeLeistung*state.BetriebsstundenBHKW/1000) * state.DavonInsNetzEingespeist/100))), state.SteigerungStromProA, 1),
                calcLogic.preisteigungsFunktion((checkIfDefined((state.DurchschnittspreisBezug + state.Stromsteuer + state.EEGUmlage + state.KWKAufschlagCa + state.SonstigeAbgaben) * 10) * calcLogic.summeReststrombezug(state.GesamtbedarfStrom, checkIfDefined(state.elektrischeLeistung*state.BetriebsstundenBHKW/1000), checkIfDefined((state.elektrischeLeistung*state.BetriebsstundenBHKW/1000) * state.DavonInsNetzEingespeist/100))), state.SteigerungStromProA, 2),
                calcLogic.preisteigungsFunktion((checkIfDefined((state.DurchschnittspreisBezug + state.Stromsteuer + state.EEGUmlage + state.KWKAufschlagCa + state.SonstigeAbgaben) * 10) * calcLogic.summeReststrombezug(state.GesamtbedarfStrom, checkIfDefined(state.elektrischeLeistung*state.BetriebsstundenBHKW/1000), checkIfDefined((state.elektrischeLeistung*state.BetriebsstundenBHKW/1000) * state.DavonInsNetzEingespeist/100))), state.SteigerungStromProA, 3),
                calcLogic.preisteigungsFunktion((checkIfDefined((state.DurchschnittspreisBezug + state.Stromsteuer + state.EEGUmlage + state.KWKAufschlagCa + state.SonstigeAbgaben) * 10) * calcLogic.summeReststrombezug(state.GesamtbedarfStrom, checkIfDefined(state.elektrischeLeistung*state.BetriebsstundenBHKW/1000), checkIfDefined((state.elektrischeLeistung*state.BetriebsstundenBHKW/1000) * state.DavonInsNetzEingespeist/100))), state.SteigerungStromProA, 4),
                calcLogic.preisteigungsFunktion((checkIfDefined((state.DurchschnittspreisBezug + state.Stromsteuer + state.EEGUmlage + state.KWKAufschlagCa + state.SonstigeAbgaben) * 10) * calcLogic.summeReststrombezug(state.GesamtbedarfStrom, checkIfDefined(state.elektrischeLeistung*state.BetriebsstundenBHKW/1000), checkIfDefined((state.elektrischeLeistung*state.BetriebsstundenBHKW/1000) * state.DavonInsNetzEingespeist/100))), state.SteigerungStromProA, 5),
                calcLogic.preisteigungsFunktion((checkIfDefined((state.DurchschnittspreisBezug + state.Stromsteuer + state.EEGUmlage + state.KWKAufschlagCa + state.SonstigeAbgaben) * 10) * calcLogic.summeReststrombezug(state.GesamtbedarfStrom, checkIfDefined(state.elektrischeLeistung*state.BetriebsstundenBHKW/1000), checkIfDefined((state.elektrischeLeistung*state.BetriebsstundenBHKW/1000) * state.DavonInsNetzEingespeist/100))), state.SteigerungStromProA, 6),
                calcLogic.preisteigungsFunktion((checkIfDefined((state.DurchschnittspreisBezug + state.Stromsteuer + state.EEGUmlage + state.KWKAufschlagCa + state.SonstigeAbgaben) * 10) * calcLogic.summeReststrombezug(state.GesamtbedarfStrom, checkIfDefined(state.elektrischeLeistung*state.BetriebsstundenBHKW/1000), checkIfDefined((state.elektrischeLeistung*state.BetriebsstundenBHKW/1000) * state.DavonInsNetzEingespeist/100))), state.SteigerungStromProA, 7),
                calcLogic.preisteigungsFunktion((checkIfDefined((state.DurchschnittspreisBezug + state.Stromsteuer + state.EEGUmlage + state.KWKAufschlagCa + state.SonstigeAbgaben) * 10) * calcLogic.summeReststrombezug(state.GesamtbedarfStrom, checkIfDefined(state.elektrischeLeistung*state.BetriebsstundenBHKW/1000), checkIfDefined((state.elektrischeLeistung*state.BetriebsstundenBHKW/1000) * state.DavonInsNetzEingespeist/100))), state.SteigerungStromProA, 8),
            ]} />
            <StaticAndDynamicOutputRow highlitedCol={highlitedCol} highlitedRow={highlitedRow} setHighlitedRow={setHighlitedRow} rowName="Erdgasgrundpreis [€/a]" valueArray={[
                calcLogic.preisteigungsFunktion(state.Erdgasgrundpreis, state.SteigerungErdgasProA, 0),
                calcLogic.preisteigungsFunktion(state.Erdgasgrundpreis, state.SteigerungErdgasProA, 1),
                calcLogic.preisteigungsFunktion(state.Erdgasgrundpreis, state.SteigerungErdgasProA, 2),
                calcLogic.preisteigungsFunktion(state.Erdgasgrundpreis, state.SteigerungErdgasProA, 3),
                calcLogic.preisteigungsFunktion(state.Erdgasgrundpreis, state.SteigerungErdgasProA, 4),
                calcLogic.preisteigungsFunktion(state.Erdgasgrundpreis, state.SteigerungErdgasProA, 5),
                calcLogic.preisteigungsFunktion(state.Erdgasgrundpreis, state.SteigerungErdgasProA, 6),
                calcLogic.preisteigungsFunktion(state.Erdgasgrundpreis, state.SteigerungErdgasProA, 7),
                calcLogic.preisteigungsFunktion(state.Erdgasgrundpreis, state.SteigerungErdgasProA, 8),
            ]} />
            <StaticAndDynamicOutputRow highlitedCol={highlitedCol} highlitedRow={highlitedRow} setHighlitedRow={setHighlitedRow} rowName="EEG-Umlage für selbst genutzen BHKW Strom [€/a]" valueArray={[
                calcLogic.EEGOutput(state.EEGUmlage, checkIfDefined(state.elektrischeLeistung*state.BetriebsstundenBHKW/1000), checkIfDefined((state.elektrischeLeistung*state.BetriebsstundenBHKW/1000) * state.DavonInsNetzEingespeist/100), state.AnteilEEGUmlageEigenstrom),
                calcLogic.EEGOutput(state.EEGUmlage, checkIfDefined(state.elektrischeLeistung*state.BetriebsstundenBHKW/1000), checkIfDefined((state.elektrischeLeistung*state.BetriebsstundenBHKW/1000) * state.DavonInsNetzEingespeist/100), state.AnteilEEGUmlageEigenstrom),
                calcLogic.EEGOutput(state.EEGUmlage, checkIfDefined(state.elektrischeLeistung*state.BetriebsstundenBHKW/1000), checkIfDefined((state.elektrischeLeistung*state.BetriebsstundenBHKW/1000) * state.DavonInsNetzEingespeist/100), state.AnteilEEGUmlageEigenstrom),
                calcLogic.EEGOutput(state.EEGUmlage, checkIfDefined(state.elektrischeLeistung*state.BetriebsstundenBHKW/1000), checkIfDefined((state.elektrischeLeistung*state.BetriebsstundenBHKW/1000) * state.DavonInsNetzEingespeist/100), state.AnteilEEGUmlageEigenstrom),
                calcLogic.EEGOutput(state.EEGUmlage, checkIfDefined(state.elektrischeLeistung*state.BetriebsstundenBHKW/1000), checkIfDefined((state.elektrischeLeistung*state.BetriebsstundenBHKW/1000) * state.DavonInsNetzEingespeist/100), state.AnteilEEGUmlageEigenstrom),
                calcLogic.EEGOutput(state.EEGUmlage, checkIfDefined(state.elektrischeLeistung*state.BetriebsstundenBHKW/1000), checkIfDefined((state.elektrischeLeistung*state.BetriebsstundenBHKW/1000) * state.DavonInsNetzEingespeist/100), state.AnteilEEGUmlageEigenstrom),
                calcLogic.EEGOutput(state.EEGUmlage, checkIfDefined(state.elektrischeLeistung*state.BetriebsstundenBHKW/1000), checkIfDefined((state.elektrischeLeistung*state.BetriebsstundenBHKW/1000) * state.DavonInsNetzEingespeist/100), state.AnteilEEGUmlageEigenstrom),
                calcLogic.EEGOutput(state.EEGUmlage, checkIfDefined(state.elektrischeLeistung*state.BetriebsstundenBHKW/1000), checkIfDefined((state.elektrischeLeistung*state.BetriebsstundenBHKW/1000) * state.DavonInsNetzEingespeist/100), state.AnteilEEGUmlageEigenstrom),
                calcLogic.EEGOutput(state.EEGUmlage, checkIfDefined(state.elektrischeLeistung*state.BetriebsstundenBHKW/1000), checkIfDefined((state.elektrischeLeistung*state.BetriebsstundenBHKW/1000) * state.DavonInsNetzEingespeist/100), state.AnteilEEGUmlageEigenstrom),
            ]} />
            <StaticAndDynamicOutputRow highlitedCol={highlitedCol} highlitedRow={highlitedRow} setHighlitedRow={setHighlitedRow} rowName="KWK Bonus [€/a]" valueArray={[
                calcLogic.kwkBonus(state.elektrischeLeistung, calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 5000, 1), checkIfValid(state.BetriebsstundenBHKW * 1), 5000, checkIfDefined((state.elektrischeLeistung*state.BetriebsstundenBHKW/1000) * state.DavonInsNetzEingespeist/100), checkIfDefined(state.elektrischeLeistung*state.BetriebsstundenBHKW/1000)),
                calcLogic.kwkBonus(state.elektrischeLeistung, calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 5000, 2), checkIfValid(state.BetriebsstundenBHKW * 1), 5000, checkIfDefined((state.elektrischeLeistung*state.BetriebsstundenBHKW/1000) * state.DavonInsNetzEingespeist/100), checkIfDefined(state.elektrischeLeistung*state.BetriebsstundenBHKW/1000)),
                calcLogic.kwkBonus(state.elektrischeLeistung, calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 4000, 3), checkIfValid(state.BetriebsstundenBHKW * 1), 4000, checkIfDefined((state.elektrischeLeistung*state.BetriebsstundenBHKW/1000) * state.DavonInsNetzEingespeist/100), checkIfDefined(state.elektrischeLeistung*state.BetriebsstundenBHKW/1000)),
                calcLogic.kwkBonus(state.elektrischeLeistung, calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 4000, 4), checkIfValid(state.BetriebsstundenBHKW * 1), 4000, checkIfDefined((state.elektrischeLeistung*state.BetriebsstundenBHKW/1000) * state.DavonInsNetzEingespeist/100), checkIfDefined(state.elektrischeLeistung*state.BetriebsstundenBHKW/1000)),
                calcLogic.kwkBonus(state.elektrischeLeistung, calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 3500, 5), checkIfValid(state.BetriebsstundenBHKW * 1), 3500, checkIfDefined((state.elektrischeLeistung*state.BetriebsstundenBHKW/1000) * state.DavonInsNetzEingespeist/100), checkIfDefined(state.elektrischeLeistung*state.BetriebsstundenBHKW/1000)),
                calcLogic.kwkBonus(state.elektrischeLeistung, calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 3500, 6), checkIfValid(state.BetriebsstundenBHKW * 1), 3500, checkIfDefined((state.elektrischeLeistung*state.BetriebsstundenBHKW/1000) * state.DavonInsNetzEingespeist/100), checkIfDefined(state.elektrischeLeistung*state.BetriebsstundenBHKW/1000)),
                calcLogic.kwkBonus(state.elektrischeLeistung, calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 3500, 7), checkIfValid(state.BetriebsstundenBHKW * 1), 3500, checkIfDefined((state.elektrischeLeistung*state.BetriebsstundenBHKW/1000) * state.DavonInsNetzEingespeist/100), checkIfDefined(state.elektrischeLeistung*state.BetriebsstundenBHKW/1000)),
                Math.round(calcLogic.kwkSpecial(calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 3500, 7), calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 5000, 1) + calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 5000, 2) + calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 4000, 3) + calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 4000, 4) + calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 3500, 5) + calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 3500, 6) + calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 3500, 7),  calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 5000, 1) + calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 5000, 2) + calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 4000, 3) + calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 4000, 4) + calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 3500, 5) + calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 3500, 6) + calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 3500, 7) + calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 3500, 8), calcLogic.kwkBonus(state.elektrischeLeistung, calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 3500, 7), checkIfValid(state.BetriebsstundenBHKW * 1), 3500, checkIfDefined((state.elektrischeLeistung*state.BetriebsstundenBHKW/1000) * state.DavonInsNetzEingespeist/100), checkIfDefined(state.elektrischeLeistung*state.BetriebsstundenBHKW/1000)))),
                Math.round(calcLogic.kwkSpecial(calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 3500, 8),  calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 5000, 1) + calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 5000, 2) + calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 4000, 3) + calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 4000, 4) + calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 3500, 5) + calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 3500, 6) + calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 3500, 7) + calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 3500, 8), calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 5000, 1) + calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 5000, 2) + calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 4000, 3) + calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 4000, 4) + calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 3500, 5) + calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 3500, 6) + calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 3500, 7) + calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 3500, 8) + calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 3500, 9),  calcLogic.kwkSpecial(calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 3500, 7), calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 5000, 1) + calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 5000, 2) + calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 4000, 3) + calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 4000, 4) + calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 3500, 5) + calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 3500, 6) + calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 3500, 7),  calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 5000, 1) + calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 5000, 2) + calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 4000, 3) + calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 4000, 4) + calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 3500, 5) + calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 3500, 6) + calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 3500, 7) + calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 3500, 8), calcLogic.kwkBonus(state.elektrischeLeistung, calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 3500, 7), checkIfValid(state.BetriebsstundenBHKW * 1), 3500, checkIfDefined((state.elektrischeLeistung*state.BetriebsstundenBHKW/1000) * state.DavonInsNetzEingespeist/100), checkIfDefined(state.elektrischeLeistung*state.BetriebsstundenBHKW/1000)))))
            ]} />
            <StaticAndDynamicOutputRow highlitedCol={highlitedCol} highlitedRow={highlitedRow} setHighlitedRow={setHighlitedRow} rowName="Rückerstattung Erdgassteuer [€/a]" valueArray={[
                calcLogic.rückerstattungErdgassteuer(checkIfDefined(bhkwState[state.elektrischeLeistung].brennstoffleistungKWHi * state.BetriebsstundenBHKW/1000 * 1.107, true), state.ErdgassteuerRückerstattung),
                calcLogic.rückerstattungErdgassteuer(checkIfDefined(bhkwState[state.elektrischeLeistung].brennstoffleistungKWHi * state.BetriebsstundenBHKW/1000 * 1.107, true), state.ErdgassteuerRückerstattung),
                calcLogic.rückerstattungErdgassteuer(checkIfDefined(bhkwState[state.elektrischeLeistung].brennstoffleistungKWHi * state.BetriebsstundenBHKW/1000 * 1.107, true), state.ErdgassteuerRückerstattung),
                calcLogic.rückerstattungErdgassteuer(checkIfDefined(bhkwState[state.elektrischeLeistung].brennstoffleistungKWHi * state.BetriebsstundenBHKW/1000 * 1.107, true), state.ErdgassteuerRückerstattung),
                calcLogic.rückerstattungErdgassteuer(checkIfDefined(bhkwState[state.elektrischeLeistung].brennstoffleistungKWHi * state.BetriebsstundenBHKW/1000 * 1.107, true), state.ErdgassteuerRückerstattung),
                calcLogic.rückerstattungErdgassteuer(checkIfDefined(bhkwState[state.elektrischeLeistung].brennstoffleistungKWHi * state.BetriebsstundenBHKW/1000 * 1.107, true), state.ErdgassteuerRückerstattung),
                calcLogic.rückerstattungErdgassteuer(checkIfDefined(bhkwState[state.elektrischeLeistung].brennstoffleistungKWHi * state.BetriebsstundenBHKW/1000 * 1.107, true), state.ErdgassteuerRückerstattung),
                calcLogic.rückerstattungErdgassteuer(checkIfDefined(bhkwState[state.elektrischeLeistung].brennstoffleistungKWHi * state.BetriebsstundenBHKW/1000 * 1.107, true), state.ErdgassteuerRückerstattung),
                calcLogic.rückerstattungErdgassteuer(checkIfDefined(bhkwState[state.elektrischeLeistung].brennstoffleistungKWHi * state.BetriebsstundenBHKW/1000 * 1.107, true), state.ErdgassteuerRückerstattung),
            ]} />
            <StaticAndDynamicOutputRow highlitedCol={highlitedCol} highlitedRow={highlitedRow} setHighlitedRow={setHighlitedRow} rowName="Stromeinspeisung [€/a]" valueArray={[
                Math.round(-1 * checkIfDefined((state.elektrischeLeistung*state.BetriebsstundenBHKW/1000) * state.DavonInsNetzEingespeist/100) * checkIfDefined(state.EEXVergütungInklVermNetznutzung)),
                Math.round(-1 * checkIfDefined((state.elektrischeLeistung*state.BetriebsstundenBHKW/1000) * state.DavonInsNetzEingespeist/100) * checkIfDefined(state.EEXVergütungInklVermNetznutzung)),
                Math.round(-1 * checkIfDefined((state.elektrischeLeistung*state.BetriebsstundenBHKW/1000) * state.DavonInsNetzEingespeist/100) * checkIfDefined(state.EEXVergütungInklVermNetznutzung)),
                Math.round(-1 * checkIfDefined((state.elektrischeLeistung*state.BetriebsstundenBHKW/1000) * state.DavonInsNetzEingespeist/100) * checkIfDefined(state.EEXVergütungInklVermNetznutzung)),
                Math.round(-1 * checkIfDefined((state.elektrischeLeistung*state.BetriebsstundenBHKW/1000) * state.DavonInsNetzEingespeist/100) * checkIfDefined(state.EEXVergütungInklVermNetznutzung)),
                Math.round(-1 * checkIfDefined((state.elektrischeLeistung*state.BetriebsstundenBHKW/1000) * state.DavonInsNetzEingespeist/100) * checkIfDefined(state.EEXVergütungInklVermNetznutzung)),
                Math.round(-1 * checkIfDefined((state.elektrischeLeistung*state.BetriebsstundenBHKW/1000) * state.DavonInsNetzEingespeist/100) * checkIfDefined(state.EEXVergütungInklVermNetznutzung)),
                Math.round(-1 * checkIfDefined((state.elektrischeLeistung*state.BetriebsstundenBHKW/1000) * state.DavonInsNetzEingespeist/100) * checkIfDefined(state.EEXVergütungInklVermNetznutzung)),
                Math.round(-1 * checkIfDefined((state.elektrischeLeistung*state.BetriebsstundenBHKW/1000) * state.DavonInsNetzEingespeist/100) * checkIfDefined(state.EEXVergütungInklVermNetznutzung)),
            ]} />
            <StaticAndDynamicOutputRow highlitedCol={highlitedCol} highlitedRow={highlitedRow} setHighlitedRow={setHighlitedRow} rowName="zus. C02-Kosten (BEHG) [€/a]" valueArray={[
                checkIfDefined(calcLogic.emissionenC7(calcLogic.brennstoffeinsatzImKessel(checkIfDefined(bhkwState[state.elektrischeLeistung].thermischeLeistung*state.BetriebsstundenBHKW/1000), checkIfDefined(state.GesamtbedarfErdgasFürHeizungUndWarmwasser/(1.107/state.JahresanlagennutzungsgradWärmeerzeuger * 100)), state.JahresanlagennutzungsgradWärmeerzeuger), checkIfDefined(bhkwState[state.elektrischeLeistung].brennstoffleistungKWHi * state.BetriebsstundenBHKW/1000 * 1.107, true))) * 25,
                checkIfDefined(calcLogic.emissionenC7(calcLogic.brennstoffeinsatzImKessel(checkIfDefined(bhkwState[state.elektrischeLeistung].thermischeLeistung*state.BetriebsstundenBHKW/1000), checkIfDefined(state.GesamtbedarfErdgasFürHeizungUndWarmwasser/(1.107/state.JahresanlagennutzungsgradWärmeerzeuger * 100)), state.JahresanlagennutzungsgradWärmeerzeuger), checkIfDefined(bhkwState[state.elektrischeLeistung].brennstoffleistungKWHi * state.BetriebsstundenBHKW/1000 * 1.107, true))) * 30,
                checkIfDefined(calcLogic.emissionenC7(calcLogic.brennstoffeinsatzImKessel(checkIfDefined(bhkwState[state.elektrischeLeistung].thermischeLeistung*state.BetriebsstundenBHKW/1000), checkIfDefined(state.GesamtbedarfErdgasFürHeizungUndWarmwasser/(1.107/state.JahresanlagennutzungsgradWärmeerzeuger * 100)), state.JahresanlagennutzungsgradWärmeerzeuger), checkIfDefined(bhkwState[state.elektrischeLeistung].brennstoffleistungKWHi * state.BetriebsstundenBHKW/1000 * 1.107, true))) * 35,
                checkIfDefined(calcLogic.emissionenC7(calcLogic.brennstoffeinsatzImKessel(checkIfDefined(bhkwState[state.elektrischeLeistung].thermischeLeistung*state.BetriebsstundenBHKW/1000), checkIfDefined(state.GesamtbedarfErdgasFürHeizungUndWarmwasser/(1.107/state.JahresanlagennutzungsgradWärmeerzeuger * 100)), state.JahresanlagennutzungsgradWärmeerzeuger), checkIfDefined(bhkwState[state.elektrischeLeistung].brennstoffleistungKWHi * state.BetriebsstundenBHKW/1000 * 1.107, true))) * 45,
                checkIfDefined(calcLogic.emissionenC7(calcLogic.brennstoffeinsatzImKessel(checkIfDefined(bhkwState[state.elektrischeLeistung].thermischeLeistung*state.BetriebsstundenBHKW/1000), checkIfDefined(state.GesamtbedarfErdgasFürHeizungUndWarmwasser/(1.107/state.JahresanlagennutzungsgradWärmeerzeuger * 100)), state.JahresanlagennutzungsgradWärmeerzeuger), checkIfDefined(bhkwState[state.elektrischeLeistung].brennstoffleistungKWHi * state.BetriebsstundenBHKW/1000 * 1.107, true))) * 55,
                checkIfDefined(calcLogic.emissionenC7(calcLogic.brennstoffeinsatzImKessel(checkIfDefined(bhkwState[state.elektrischeLeistung].thermischeLeistung*state.BetriebsstundenBHKW/1000), checkIfDefined(state.GesamtbedarfErdgasFürHeizungUndWarmwasser/(1.107/state.JahresanlagennutzungsgradWärmeerzeuger * 100)), state.JahresanlagennutzungsgradWärmeerzeuger), checkIfDefined(bhkwState[state.elektrischeLeistung].brennstoffleistungKWHi * state.BetriebsstundenBHKW/1000 * 1.107, true))) * 55,
                checkIfDefined(calcLogic.emissionenC7(calcLogic.brennstoffeinsatzImKessel(checkIfDefined(bhkwState[state.elektrischeLeistung].thermischeLeistung*state.BetriebsstundenBHKW/1000), checkIfDefined(state.GesamtbedarfErdgasFürHeizungUndWarmwasser/(1.107/state.JahresanlagennutzungsgradWärmeerzeuger * 100)), state.JahresanlagennutzungsgradWärmeerzeuger), checkIfDefined(bhkwState[state.elektrischeLeistung].brennstoffleistungKWHi * state.BetriebsstundenBHKW/1000 * 1.107, true))) * 55,
                checkIfDefined(calcLogic.emissionenC7(calcLogic.brennstoffeinsatzImKessel(checkIfDefined(bhkwState[state.elektrischeLeistung].thermischeLeistung*state.BetriebsstundenBHKW/1000), checkIfDefined(state.GesamtbedarfErdgasFürHeizungUndWarmwasser/(1.107/state.JahresanlagennutzungsgradWärmeerzeuger * 100)), state.JahresanlagennutzungsgradWärmeerzeuger), checkIfDefined(bhkwState[state.elektrischeLeistung].brennstoffleistungKWHi * state.BetriebsstundenBHKW/1000 * 1.107, true))) * 55,
                checkIfDefined(calcLogic.emissionenC7(calcLogic.brennstoffeinsatzImKessel(checkIfDefined(bhkwState[state.elektrischeLeistung].thermischeLeistung*state.BetriebsstundenBHKW/1000), checkIfDefined(state.GesamtbedarfErdgasFürHeizungUndWarmwasser/(1.107/state.JahresanlagennutzungsgradWärmeerzeuger * 100)), state.JahresanlagennutzungsgradWärmeerzeuger), checkIfDefined(bhkwState[state.elektrischeLeistung].brennstoffleistungKWHi * state.BetriebsstundenBHKW/1000 * 1.107, true))) * 55,
            ]} />
            <StaticAndDynamicOutputRow highlitedCol={highlitedCol} highlitedRow={highlitedRow} setHighlitedRow={setHighlitedRow} bold={true} rowName="Summe [€/a]" valueArray={[
             Math.round(calcLogic.rmz(state.KapitalzinsDerFinazierendenBank/100, state.Finanzierungszeitraum, state.InvestitionLautAnbieter, 0,0) * (-1) + calcLogic.preisteigungsFunktion(state.BetriebsstundenBHKW * state.Vollwartung, state.PreissteigerungenWartungProA, 0) + complicatedData("VollrevisionDaten", state)[0] + calcLogic.preisteigungsFunktion((state.BasisgaspreisInklAllerAbgabenNetto * checkIfDefined(bhkwState[state.elektrischeLeistung].brennstoffleistungKWHi * state.BetriebsstundenBHKW/1000 * 1.107, true)), state.SteigerungErdgasProA, 0) + calcLogic.preisteigungsFunktion(state.BasisgaspreisInklAllerAbgabenNetto * calcLogic.brennstoffeinsatzImKessel(checkIfDefined(bhkwState[state.elektrischeLeistung].thermischeLeistung*state.BetriebsstundenBHKW/1000), checkIfDefined(state.GesamtbedarfErdgasFürHeizungUndWarmwasser/(1.107/state.JahresanlagennutzungsgradWärmeerzeuger * 100)), state.JahresanlagennutzungsgradWärmeerzeuger), state.SteigerungErdgasProA, 0) + calcLogic.preisteigungsFunktion((checkIfDefined((state.DurchschnittspreisBezug + state.Stromsteuer + state.EEGUmlage + state.KWKAufschlagCa + state.SonstigeAbgaben) * 10) * calcLogic.summeReststrombezug(state.GesamtbedarfStrom, checkIfDefined(state.elektrischeLeistung*state.BetriebsstundenBHKW/1000), checkIfDefined((state.elektrischeLeistung*state.BetriebsstundenBHKW/1000) * state.DavonInsNetzEingespeist/100))), state.SteigerungStromProA, 0) + calcLogic.preisteigungsFunktion(state.Erdgasgrundpreis, state.SteigerungErdgasProA, 0) + calcLogic.EEGOutput(state.EEGUmlage, checkIfDefined(state.elektrischeLeistung*state.BetriebsstundenBHKW/1000), checkIfDefined((state.elektrischeLeistung*state.BetriebsstundenBHKW/1000) * state.DavonInsNetzEingespeist/100), state.AnteilEEGUmlageEigenstrom) + calcLogic.rückerstattungErdgassteuer(checkIfDefined(bhkwState[state.elektrischeLeistung].brennstoffleistungKWHi * state.BetriebsstundenBHKW/1000 * 1.107, true), state.ErdgassteuerRückerstattung) - checkIfDefined((state.elektrischeLeistung*state.BetriebsstundenBHKW/1000) * state.DavonInsNetzEingespeist/100) * checkIfDefined(state.EEXVergütungInklVermNetznutzung) + checkIfDefined(calcLogic.emissionenC7(calcLogic.brennstoffeinsatzImKessel(checkIfDefined(bhkwState[state.elektrischeLeistung].thermischeLeistung*state.BetriebsstundenBHKW/1000), checkIfDefined(state.GesamtbedarfErdgasFürHeizungUndWarmwasser/(1.107/state.JahresanlagennutzungsgradWärmeerzeuger * 100)), state.JahresanlagennutzungsgradWärmeerzeuger), checkIfDefined(bhkwState[state.elektrischeLeistung].brennstoffleistungKWHi * state.BetriebsstundenBHKW/1000 * 1.107, true))) * 25 + calcLogic.kwkBonus(state.elektrischeLeistung, calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 5000, 1), checkIfValid(state.BetriebsstundenBHKW * 1), 5000, checkIfDefined((state.elektrischeLeistung*state.BetriebsstundenBHKW/1000) * state.DavonInsNetzEingespeist/100), checkIfDefined(state.elektrischeLeistung*state.BetriebsstundenBHKW/1000))),
             Math.round(calcLogic.rmz(state.KapitalzinsDerFinazierendenBank/100, state.Finanzierungszeitraum, state.InvestitionLautAnbieter, 0,0) * (-1) + calcLogic.preisteigungsFunktion(state.BetriebsstundenBHKW * state.Vollwartung, state.PreissteigerungenWartungProA, 1) + complicatedData("VollrevisionDaten", state)[1] + calcLogic.preisteigungsFunktion((state.BasisgaspreisInklAllerAbgabenNetto * checkIfDefined(bhkwState[state.elektrischeLeistung].brennstoffleistungKWHi * state.BetriebsstundenBHKW/1000 * 1.107, true)), state.SteigerungErdgasProA, 1) + calcLogic.preisteigungsFunktion(state.BasisgaspreisInklAllerAbgabenNetto * calcLogic.brennstoffeinsatzImKessel(checkIfDefined(bhkwState[state.elektrischeLeistung].thermischeLeistung*state.BetriebsstundenBHKW/1000), checkIfDefined(state.GesamtbedarfErdgasFürHeizungUndWarmwasser/(1.107/state.JahresanlagennutzungsgradWärmeerzeuger * 100)), state.JahresanlagennutzungsgradWärmeerzeuger), state.SteigerungErdgasProA, 1) + calcLogic.preisteigungsFunktion((checkIfDefined((state.DurchschnittspreisBezug + state.Stromsteuer + state.EEGUmlage + state.KWKAufschlagCa + state.SonstigeAbgaben) * 10) * calcLogic.summeReststrombezug(state.GesamtbedarfStrom, checkIfDefined(state.elektrischeLeistung*state.BetriebsstundenBHKW/1000), checkIfDefined((state.elektrischeLeistung*state.BetriebsstundenBHKW/1000) * state.DavonInsNetzEingespeist/100))), state.SteigerungStromProA, 1) + calcLogic.preisteigungsFunktion(state.Erdgasgrundpreis, state.SteigerungErdgasProA, 1) + calcLogic.EEGOutput(state.EEGUmlage, checkIfDefined(state.elektrischeLeistung*state.BetriebsstundenBHKW/1000), checkIfDefined((state.elektrischeLeistung*state.BetriebsstundenBHKW/1000) * state.DavonInsNetzEingespeist/100), state.AnteilEEGUmlageEigenstrom) + calcLogic.rückerstattungErdgassteuer(checkIfDefined(bhkwState[state.elektrischeLeistung].brennstoffleistungKWHi * state.BetriebsstundenBHKW/1000 * 1.107, true), state.ErdgassteuerRückerstattung) - checkIfDefined((state.elektrischeLeistung*state.BetriebsstundenBHKW/1000) * state.DavonInsNetzEingespeist/100) * checkIfDefined(state.EEXVergütungInklVermNetznutzung) + checkIfDefined(calcLogic.emissionenC7(calcLogic.brennstoffeinsatzImKessel(checkIfDefined(bhkwState[state.elektrischeLeistung].thermischeLeistung*state.BetriebsstundenBHKW/1000), checkIfDefined(state.GesamtbedarfErdgasFürHeizungUndWarmwasser/(1.107/state.JahresanlagennutzungsgradWärmeerzeuger * 100)), state.JahresanlagennutzungsgradWärmeerzeuger), checkIfDefined(bhkwState[state.elektrischeLeistung].brennstoffleistungKWHi * state.BetriebsstundenBHKW/1000 * 1.107, true))) * 30 + calcLogic.kwkBonus(state.elektrischeLeistung, calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 5000, 2), checkIfValid(state.BetriebsstundenBHKW * 1), 5000, checkIfDefined((state.elektrischeLeistung*state.BetriebsstundenBHKW/1000) * state.DavonInsNetzEingespeist/100), checkIfDefined(state.elektrischeLeistung*state.BetriebsstundenBHKW/1000))),
             Math.round(calcLogic.rmz(state.KapitalzinsDerFinazierendenBank/100, state.Finanzierungszeitraum, state.InvestitionLautAnbieter, 0,0) * (-1) + calcLogic.preisteigungsFunktion(state.BetriebsstundenBHKW * state.Vollwartung, state.PreissteigerungenWartungProA, 2) + complicatedData("VollrevisionDaten", state)[2] + calcLogic.preisteigungsFunktion((state.BasisgaspreisInklAllerAbgabenNetto * checkIfDefined(bhkwState[state.elektrischeLeistung].brennstoffleistungKWHi * state.BetriebsstundenBHKW/1000 * 1.107, true)), state.SteigerungErdgasProA, 2) + calcLogic.preisteigungsFunktion(state.BasisgaspreisInklAllerAbgabenNetto * calcLogic.brennstoffeinsatzImKessel(checkIfDefined(bhkwState[state.elektrischeLeistung].thermischeLeistung*state.BetriebsstundenBHKW/1000), checkIfDefined(state.GesamtbedarfErdgasFürHeizungUndWarmwasser/(1.107/state.JahresanlagennutzungsgradWärmeerzeuger * 100)), state.JahresanlagennutzungsgradWärmeerzeuger), state.SteigerungErdgasProA, 2) + calcLogic.preisteigungsFunktion((checkIfDefined((state.DurchschnittspreisBezug + state.Stromsteuer + state.EEGUmlage + state.KWKAufschlagCa + state.SonstigeAbgaben) * 10) * calcLogic.summeReststrombezug(state.GesamtbedarfStrom, checkIfDefined(state.elektrischeLeistung*state.BetriebsstundenBHKW/1000), checkIfDefined((state.elektrischeLeistung*state.BetriebsstundenBHKW/1000) * state.DavonInsNetzEingespeist/100))), state.SteigerungStromProA, 2) + calcLogic.preisteigungsFunktion(state.Erdgasgrundpreis, state.SteigerungErdgasProA, 2) + calcLogic.EEGOutput(state.EEGUmlage, checkIfDefined(state.elektrischeLeistung*state.BetriebsstundenBHKW/1000), checkIfDefined((state.elektrischeLeistung*state.BetriebsstundenBHKW/1000) * state.DavonInsNetzEingespeist/100), state.AnteilEEGUmlageEigenstrom) + calcLogic.rückerstattungErdgassteuer(checkIfDefined(bhkwState[state.elektrischeLeistung].brennstoffleistungKWHi * state.BetriebsstundenBHKW/1000 * 1.107, true), state.ErdgassteuerRückerstattung) - checkIfDefined((state.elektrischeLeistung*state.BetriebsstundenBHKW/1000) * state.DavonInsNetzEingespeist/100) * checkIfDefined(state.EEXVergütungInklVermNetznutzung) + checkIfDefined(calcLogic.emissionenC7(calcLogic.brennstoffeinsatzImKessel(checkIfDefined(bhkwState[state.elektrischeLeistung].thermischeLeistung*state.BetriebsstundenBHKW/1000), checkIfDefined(state.GesamtbedarfErdgasFürHeizungUndWarmwasser/(1.107/state.JahresanlagennutzungsgradWärmeerzeuger * 100)), state.JahresanlagennutzungsgradWärmeerzeuger), checkIfDefined(bhkwState[state.elektrischeLeistung].brennstoffleistungKWHi * state.BetriebsstundenBHKW/1000 * 1.107, true))) * 35 + calcLogic.kwkBonus(state.elektrischeLeistung, calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 4000, 3), checkIfValid(state.BetriebsstundenBHKW * 1), 4000, checkIfDefined((state.elektrischeLeistung*state.BetriebsstundenBHKW/1000) * state.DavonInsNetzEingespeist/100), checkIfDefined(state.elektrischeLeistung*state.BetriebsstundenBHKW/1000))),
             Math.round(calcLogic.rmz(state.KapitalzinsDerFinazierendenBank/100, state.Finanzierungszeitraum, state.InvestitionLautAnbieter, 0,0) * (-1) + calcLogic.preisteigungsFunktion(state.BetriebsstundenBHKW * state.Vollwartung, state.PreissteigerungenWartungProA, 3) + complicatedData("VollrevisionDaten", state)[3] + calcLogic.preisteigungsFunktion((state.BasisgaspreisInklAllerAbgabenNetto * checkIfDefined(bhkwState[state.elektrischeLeistung].brennstoffleistungKWHi * state.BetriebsstundenBHKW/1000 * 1.107, true)), state.SteigerungErdgasProA, 3) + calcLogic.preisteigungsFunktion(state.BasisgaspreisInklAllerAbgabenNetto * calcLogic.brennstoffeinsatzImKessel(checkIfDefined(bhkwState[state.elektrischeLeistung].thermischeLeistung*state.BetriebsstundenBHKW/1000), checkIfDefined(state.GesamtbedarfErdgasFürHeizungUndWarmwasser/(1.107/state.JahresanlagennutzungsgradWärmeerzeuger * 100)), state.JahresanlagennutzungsgradWärmeerzeuger), state.SteigerungErdgasProA, 3) + calcLogic.preisteigungsFunktion((checkIfDefined((state.DurchschnittspreisBezug + state.Stromsteuer + state.EEGUmlage + state.KWKAufschlagCa + state.SonstigeAbgaben) * 10) * calcLogic.summeReststrombezug(state.GesamtbedarfStrom, checkIfDefined(state.elektrischeLeistung*state.BetriebsstundenBHKW/1000), checkIfDefined((state.elektrischeLeistung*state.BetriebsstundenBHKW/1000) * state.DavonInsNetzEingespeist/100))), state.SteigerungStromProA, 3) + calcLogic.preisteigungsFunktion(state.Erdgasgrundpreis, state.SteigerungErdgasProA, 3) + calcLogic.EEGOutput(state.EEGUmlage, checkIfDefined(state.elektrischeLeistung*state.BetriebsstundenBHKW/1000), checkIfDefined((state.elektrischeLeistung*state.BetriebsstundenBHKW/1000) * state.DavonInsNetzEingespeist/100), state.AnteilEEGUmlageEigenstrom) + calcLogic.rückerstattungErdgassteuer(checkIfDefined(bhkwState[state.elektrischeLeistung].brennstoffleistungKWHi * state.BetriebsstundenBHKW/1000 * 1.107, true), state.ErdgassteuerRückerstattung) - checkIfDefined((state.elektrischeLeistung*state.BetriebsstundenBHKW/1000) * state.DavonInsNetzEingespeist/100) * checkIfDefined(state.EEXVergütungInklVermNetznutzung) + checkIfDefined(calcLogic.emissionenC7(calcLogic.brennstoffeinsatzImKessel(checkIfDefined(bhkwState[state.elektrischeLeistung].thermischeLeistung*state.BetriebsstundenBHKW/1000), checkIfDefined(state.GesamtbedarfErdgasFürHeizungUndWarmwasser/(1.107/state.JahresanlagennutzungsgradWärmeerzeuger * 100)), state.JahresanlagennutzungsgradWärmeerzeuger), checkIfDefined(bhkwState[state.elektrischeLeistung].brennstoffleistungKWHi * state.BetriebsstundenBHKW/1000 * 1.107, true))) * 45 + calcLogic.kwkBonus(state.elektrischeLeistung, calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 4000, 4), checkIfValid(state.BetriebsstundenBHKW * 1), 4000, checkIfDefined((state.elektrischeLeistung*state.BetriebsstundenBHKW/1000) * state.DavonInsNetzEingespeist/100), checkIfDefined(state.elektrischeLeistung*state.BetriebsstundenBHKW/1000))),
             Math.round(calcLogic.rmz(state.KapitalzinsDerFinazierendenBank/100, state.Finanzierungszeitraum, state.InvestitionLautAnbieter, 0,0) * (-1) + calcLogic.preisteigungsFunktion(state.BetriebsstundenBHKW * state.Vollwartung, state.PreissteigerungenWartungProA, 4) + complicatedData("VollrevisionDaten", state)[4] + calcLogic.preisteigungsFunktion((state.BasisgaspreisInklAllerAbgabenNetto * checkIfDefined(bhkwState[state.elektrischeLeistung].brennstoffleistungKWHi * state.BetriebsstundenBHKW/1000 * 1.107, true)), state.SteigerungErdgasProA, 4) + calcLogic.preisteigungsFunktion(state.BasisgaspreisInklAllerAbgabenNetto * calcLogic.brennstoffeinsatzImKessel(checkIfDefined(bhkwState[state.elektrischeLeistung].thermischeLeistung*state.BetriebsstundenBHKW/1000), checkIfDefined(state.GesamtbedarfErdgasFürHeizungUndWarmwasser/(1.107/state.JahresanlagennutzungsgradWärmeerzeuger * 100)), state.JahresanlagennutzungsgradWärmeerzeuger), state.SteigerungErdgasProA, 4) + calcLogic.preisteigungsFunktion((checkIfDefined((state.DurchschnittspreisBezug + state.Stromsteuer + state.EEGUmlage + state.KWKAufschlagCa + state.SonstigeAbgaben) * 10) * calcLogic.summeReststrombezug(state.GesamtbedarfStrom, checkIfDefined(state.elektrischeLeistung*state.BetriebsstundenBHKW/1000), checkIfDefined((state.elektrischeLeistung*state.BetriebsstundenBHKW/1000) * state.DavonInsNetzEingespeist/100))), state.SteigerungStromProA, 4) + calcLogic.preisteigungsFunktion(state.Erdgasgrundpreis, state.SteigerungErdgasProA, 4) + calcLogic.EEGOutput(state.EEGUmlage, checkIfDefined(state.elektrischeLeistung*state.BetriebsstundenBHKW/1000), checkIfDefined((state.elektrischeLeistung*state.BetriebsstundenBHKW/1000) * state.DavonInsNetzEingespeist/100), state.AnteilEEGUmlageEigenstrom) + calcLogic.rückerstattungErdgassteuer(checkIfDefined(bhkwState[state.elektrischeLeistung].brennstoffleistungKWHi * state.BetriebsstundenBHKW/1000 * 1.107, true), state.ErdgassteuerRückerstattung) - checkIfDefined((state.elektrischeLeistung*state.BetriebsstundenBHKW/1000) * state.DavonInsNetzEingespeist/100) * checkIfDefined(state.EEXVergütungInklVermNetznutzung) + checkIfDefined(calcLogic.emissionenC7(calcLogic.brennstoffeinsatzImKessel(checkIfDefined(bhkwState[state.elektrischeLeistung].thermischeLeistung*state.BetriebsstundenBHKW/1000), checkIfDefined(state.GesamtbedarfErdgasFürHeizungUndWarmwasser/(1.107/state.JahresanlagennutzungsgradWärmeerzeuger * 100)), state.JahresanlagennutzungsgradWärmeerzeuger), checkIfDefined(bhkwState[state.elektrischeLeistung].brennstoffleistungKWHi * state.BetriebsstundenBHKW/1000 * 1.107, true))) * 55 + calcLogic.kwkBonus(state.elektrischeLeistung, calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 3500, 5), checkIfValid(state.BetriebsstundenBHKW * 1), 3500, checkIfDefined((state.elektrischeLeistung*state.BetriebsstundenBHKW/1000) * state.DavonInsNetzEingespeist/100), checkIfDefined(state.elektrischeLeistung*state.BetriebsstundenBHKW/1000))),
             Math.round(calcLogic.rmz(state.KapitalzinsDerFinazierendenBank/100, state.Finanzierungszeitraum, state.InvestitionLautAnbieter, 0,0) * (-1) + calcLogic.preisteigungsFunktion(state.BetriebsstundenBHKW * state.Vollwartung, state.PreissteigerungenWartungProA, 5) + complicatedData("VollrevisionDaten", state)[5] + calcLogic.preisteigungsFunktion((state.BasisgaspreisInklAllerAbgabenNetto * checkIfDefined(bhkwState[state.elektrischeLeistung].brennstoffleistungKWHi * state.BetriebsstundenBHKW/1000 * 1.107, true)), state.SteigerungErdgasProA, 5) + calcLogic.preisteigungsFunktion(state.BasisgaspreisInklAllerAbgabenNetto * calcLogic.brennstoffeinsatzImKessel(checkIfDefined(bhkwState[state.elektrischeLeistung].thermischeLeistung*state.BetriebsstundenBHKW/1000), checkIfDefined(state.GesamtbedarfErdgasFürHeizungUndWarmwasser/(1.107/state.JahresanlagennutzungsgradWärmeerzeuger * 100)), state.JahresanlagennutzungsgradWärmeerzeuger), state.SteigerungErdgasProA, 5) + calcLogic.preisteigungsFunktion((checkIfDefined((state.DurchschnittspreisBezug + state.Stromsteuer + state.EEGUmlage + state.KWKAufschlagCa + state.SonstigeAbgaben) * 10) * calcLogic.summeReststrombezug(state.GesamtbedarfStrom, checkIfDefined(state.elektrischeLeistung*state.BetriebsstundenBHKW/1000), checkIfDefined((state.elektrischeLeistung*state.BetriebsstundenBHKW/1000) * state.DavonInsNetzEingespeist/100))), state.SteigerungStromProA, 5) + calcLogic.preisteigungsFunktion(state.Erdgasgrundpreis, state.SteigerungErdgasProA, 5) + calcLogic.EEGOutput(state.EEGUmlage, checkIfDefined(state.elektrischeLeistung*state.BetriebsstundenBHKW/1000), checkIfDefined((state.elektrischeLeistung*state.BetriebsstundenBHKW/1000) * state.DavonInsNetzEingespeist/100), state.AnteilEEGUmlageEigenstrom) + calcLogic.rückerstattungErdgassteuer(checkIfDefined(bhkwState[state.elektrischeLeistung].brennstoffleistungKWHi * state.BetriebsstundenBHKW/1000 * 1.107, true), state.ErdgassteuerRückerstattung) - checkIfDefined((state.elektrischeLeistung*state.BetriebsstundenBHKW/1000) * state.DavonInsNetzEingespeist/100) * checkIfDefined(state.EEXVergütungInklVermNetznutzung) + checkIfDefined(calcLogic.emissionenC7(calcLogic.brennstoffeinsatzImKessel(checkIfDefined(bhkwState[state.elektrischeLeistung].thermischeLeistung*state.BetriebsstundenBHKW/1000), checkIfDefined(state.GesamtbedarfErdgasFürHeizungUndWarmwasser/(1.107/state.JahresanlagennutzungsgradWärmeerzeuger * 100)), state.JahresanlagennutzungsgradWärmeerzeuger), checkIfDefined(bhkwState[state.elektrischeLeistung].brennstoffleistungKWHi * state.BetriebsstundenBHKW/1000 * 1.107, true))) * 55 + calcLogic.kwkBonus(state.elektrischeLeistung, calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 3500, 6), checkIfValid(state.BetriebsstundenBHKW * 1), 3500, checkIfDefined((state.elektrischeLeistung*state.BetriebsstundenBHKW/1000) * state.DavonInsNetzEingespeist/100), checkIfDefined(state.elektrischeLeistung*state.BetriebsstundenBHKW/1000))),
             Math.round(calcLogic.rmz(state.KapitalzinsDerFinazierendenBank/100, state.Finanzierungszeitraum, state.InvestitionLautAnbieter, 0,0) * (-1) + calcLogic.preisteigungsFunktion(state.BetriebsstundenBHKW * state.Vollwartung, state.PreissteigerungenWartungProA, 6) + complicatedData("VollrevisionDaten", state)[6] + calcLogic.preisteigungsFunktion((state.BasisgaspreisInklAllerAbgabenNetto * checkIfDefined(bhkwState[state.elektrischeLeistung].brennstoffleistungKWHi * state.BetriebsstundenBHKW/1000 * 1.107, true)), state.SteigerungErdgasProA, 6) + calcLogic.preisteigungsFunktion(state.BasisgaspreisInklAllerAbgabenNetto * calcLogic.brennstoffeinsatzImKessel(checkIfDefined(bhkwState[state.elektrischeLeistung].thermischeLeistung*state.BetriebsstundenBHKW/1000), checkIfDefined(state.GesamtbedarfErdgasFürHeizungUndWarmwasser/(1.107/state.JahresanlagennutzungsgradWärmeerzeuger * 100)), state.JahresanlagennutzungsgradWärmeerzeuger), state.SteigerungErdgasProA, 6) + calcLogic.preisteigungsFunktion((checkIfDefined((state.DurchschnittspreisBezug + state.Stromsteuer + state.EEGUmlage + state.KWKAufschlagCa + state.SonstigeAbgaben) * 10) * calcLogic.summeReststrombezug(state.GesamtbedarfStrom, checkIfDefined(state.elektrischeLeistung*state.BetriebsstundenBHKW/1000), checkIfDefined((state.elektrischeLeistung*state.BetriebsstundenBHKW/1000) * state.DavonInsNetzEingespeist/100))), state.SteigerungStromProA, 6) + calcLogic.preisteigungsFunktion(state.Erdgasgrundpreis, state.SteigerungErdgasProA, 6) + calcLogic.EEGOutput(state.EEGUmlage, checkIfDefined(state.elektrischeLeistung*state.BetriebsstundenBHKW/1000), checkIfDefined((state.elektrischeLeistung*state.BetriebsstundenBHKW/1000) * state.DavonInsNetzEingespeist/100), state.AnteilEEGUmlageEigenstrom) + calcLogic.rückerstattungErdgassteuer(checkIfDefined(bhkwState[state.elektrischeLeistung].brennstoffleistungKWHi * state.BetriebsstundenBHKW/1000 * 1.107, true), state.ErdgassteuerRückerstattung) - checkIfDefined((state.elektrischeLeistung*state.BetriebsstundenBHKW/1000) * state.DavonInsNetzEingespeist/100) * checkIfDefined(state.EEXVergütungInklVermNetznutzung) + checkIfDefined(calcLogic.emissionenC7(calcLogic.brennstoffeinsatzImKessel(checkIfDefined(bhkwState[state.elektrischeLeistung].thermischeLeistung*state.BetriebsstundenBHKW/1000), checkIfDefined(state.GesamtbedarfErdgasFürHeizungUndWarmwasser/(1.107/state.JahresanlagennutzungsgradWärmeerzeuger * 100)), state.JahresanlagennutzungsgradWärmeerzeuger), checkIfDefined(bhkwState[state.elektrischeLeistung].brennstoffleistungKWHi * state.BetriebsstundenBHKW/1000 * 1.107, true))) * 55 + calcLogic.kwkBonus(state.elektrischeLeistung, calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 3500, 7), checkIfValid(state.BetriebsstundenBHKW * 1), 3500, checkIfDefined((state.elektrischeLeistung*state.BetriebsstundenBHKW/1000) * state.DavonInsNetzEingespeist/100), checkIfDefined(state.elektrischeLeistung*state.BetriebsstundenBHKW/1000))),
             Math.round(calcLogic.rmz(state.KapitalzinsDerFinazierendenBank/100, state.Finanzierungszeitraum, state.InvestitionLautAnbieter, 0,0) * (-1) + calcLogic.preisteigungsFunktion(state.BetriebsstundenBHKW * state.Vollwartung, state.PreissteigerungenWartungProA, 7) + complicatedData("VollrevisionDaten", state)[7] + calcLogic.preisteigungsFunktion((state.BasisgaspreisInklAllerAbgabenNetto * checkIfDefined(bhkwState[state.elektrischeLeistung].brennstoffleistungKWHi * state.BetriebsstundenBHKW/1000 * 1.107, true)), state.SteigerungErdgasProA, 7) + calcLogic.preisteigungsFunktion(state.BasisgaspreisInklAllerAbgabenNetto * calcLogic.brennstoffeinsatzImKessel(checkIfDefined(bhkwState[state.elektrischeLeistung].thermischeLeistung*state.BetriebsstundenBHKW/1000), checkIfDefined(state.GesamtbedarfErdgasFürHeizungUndWarmwasser/(1.107/state.JahresanlagennutzungsgradWärmeerzeuger * 100)), state.JahresanlagennutzungsgradWärmeerzeuger), state.SteigerungErdgasProA, 7) + calcLogic.preisteigungsFunktion((checkIfDefined((state.DurchschnittspreisBezug + state.Stromsteuer + state.EEGUmlage + state.KWKAufschlagCa + state.SonstigeAbgaben) * 10) * calcLogic.summeReststrombezug(state.GesamtbedarfStrom, checkIfDefined(state.elektrischeLeistung*state.BetriebsstundenBHKW/1000), checkIfDefined((state.elektrischeLeistung*state.BetriebsstundenBHKW/1000) * state.DavonInsNetzEingespeist/100))), state.SteigerungStromProA, 7) + calcLogic.preisteigungsFunktion(state.Erdgasgrundpreis, state.SteigerungErdgasProA, 7) + calcLogic.EEGOutput(state.EEGUmlage, checkIfDefined(state.elektrischeLeistung*state.BetriebsstundenBHKW/1000), checkIfDefined((state.elektrischeLeistung*state.BetriebsstundenBHKW/1000) * state.DavonInsNetzEingespeist/100), state.AnteilEEGUmlageEigenstrom) + calcLogic.rückerstattungErdgassteuer(checkIfDefined(bhkwState[state.elektrischeLeistung].brennstoffleistungKWHi * state.BetriebsstundenBHKW/1000 * 1.107, true), state.ErdgassteuerRückerstattung) - checkIfDefined((state.elektrischeLeistung*state.BetriebsstundenBHKW/1000) * state.DavonInsNetzEingespeist/100) * checkIfDefined(state.EEXVergütungInklVermNetznutzung) + checkIfDefined(calcLogic.emissionenC7(calcLogic.brennstoffeinsatzImKessel(checkIfDefined(bhkwState[state.elektrischeLeistung].thermischeLeistung*state.BetriebsstundenBHKW/1000), checkIfDefined(state.GesamtbedarfErdgasFürHeizungUndWarmwasser/(1.107/state.JahresanlagennutzungsgradWärmeerzeuger * 100)), state.JahresanlagennutzungsgradWärmeerzeuger), checkIfDefined(bhkwState[state.elektrischeLeistung].brennstoffleistungKWHi * state.BetriebsstundenBHKW/1000 * 1.107, true))) * 55 + calcLogic.kwkSpecial(calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 3500, 7), calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 5000, 1) + calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 5000, 2) + calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 4000, 3) + calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 4000, 4) + calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 3500, 5) + calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 3500, 6) + calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 3500, 7),  calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 5000, 1) + calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 5000, 2) + calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 4000, 3) + calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 4000, 4) + calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 3500, 5) + calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 3500, 6) + calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 3500, 7) + calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 3500, 8), calcLogic.kwkBonus(state.elektrischeLeistung, calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 3500, 7), checkIfValid(state.BetriebsstundenBHKW * 1), 3500, checkIfDefined((state.elektrischeLeistung*state.BetriebsstundenBHKW/1000) * state.DavonInsNetzEingespeist/100), checkIfDefined(state.elektrischeLeistung*state.BetriebsstundenBHKW/1000)))),
             Math.round(calcLogic.rmz(state.KapitalzinsDerFinazierendenBank/100, state.Finanzierungszeitraum, state.InvestitionLautAnbieter, 0,0) * (-1) + calcLogic.preisteigungsFunktion(state.BetriebsstundenBHKW * state.Vollwartung, state.PreissteigerungenWartungProA, 8) + complicatedData("VollrevisionDaten", state)[8] + calcLogic.preisteigungsFunktion((state.BasisgaspreisInklAllerAbgabenNetto * checkIfDefined(bhkwState[state.elektrischeLeistung].brennstoffleistungKWHi * state.BetriebsstundenBHKW/1000 * 1.107, true)), state.SteigerungErdgasProA, 8) + calcLogic.preisteigungsFunktion(state.BasisgaspreisInklAllerAbgabenNetto * calcLogic.brennstoffeinsatzImKessel(checkIfDefined(bhkwState[state.elektrischeLeistung].thermischeLeistung*state.BetriebsstundenBHKW/1000), checkIfDefined(state.GesamtbedarfErdgasFürHeizungUndWarmwasser/(1.107/state.JahresanlagennutzungsgradWärmeerzeuger * 100)), state.JahresanlagennutzungsgradWärmeerzeuger), state.SteigerungErdgasProA, 8) + calcLogic.preisteigungsFunktion((checkIfDefined((state.DurchschnittspreisBezug + state.Stromsteuer + state.EEGUmlage + state.KWKAufschlagCa + state.SonstigeAbgaben) * 10) * calcLogic.summeReststrombezug(state.GesamtbedarfStrom, checkIfDefined(state.elektrischeLeistung*state.BetriebsstundenBHKW/1000), checkIfDefined((state.elektrischeLeistung*state.BetriebsstundenBHKW/1000) * state.DavonInsNetzEingespeist/100))), state.SteigerungStromProA, 8) + calcLogic.preisteigungsFunktion(state.Erdgasgrundpreis, state.SteigerungErdgasProA, 8) + calcLogic.EEGOutput(state.EEGUmlage, checkIfDefined(state.elektrischeLeistung*state.BetriebsstundenBHKW/1000), checkIfDefined((state.elektrischeLeistung*state.BetriebsstundenBHKW/1000) * state.DavonInsNetzEingespeist/100), state.AnteilEEGUmlageEigenstrom) + calcLogic.rückerstattungErdgassteuer(checkIfDefined(bhkwState[state.elektrischeLeistung].brennstoffleistungKWHi * state.BetriebsstundenBHKW/1000 * 1.107, true), state.ErdgassteuerRückerstattung) - checkIfDefined((state.elektrischeLeistung*state.BetriebsstundenBHKW/1000) * state.DavonInsNetzEingespeist/100) * checkIfDefined(state.EEXVergütungInklVermNetznutzung) + checkIfDefined(calcLogic.emissionenC7(calcLogic.brennstoffeinsatzImKessel(checkIfDefined(bhkwState[state.elektrischeLeistung].thermischeLeistung*state.BetriebsstundenBHKW/1000), checkIfDefined(state.GesamtbedarfErdgasFürHeizungUndWarmwasser/(1.107/state.JahresanlagennutzungsgradWärmeerzeuger * 100)), state.JahresanlagennutzungsgradWärmeerzeuger), checkIfDefined(bhkwState[state.elektrischeLeistung].brennstoffleistungKWHi * state.BetriebsstundenBHKW/1000 * 1.107, true))) * 55 +   calcLogic.kwkSpecial(calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 3500, 8),  calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 5000, 1) + calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 5000, 2) + calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 4000, 3) + calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 4000, 4) + calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 3500, 5) + calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 3500, 6) + calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 3500, 7) + calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 3500, 8), calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 5000, 1) + calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 5000, 2) + calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 4000, 3) + calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 4000, 4) + calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 3500, 5) + calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 3500, 6) + calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 3500, 7) + calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 3500, 8) + calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 3500, 9),  calcLogic.kwkSpecial(calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 3500, 7), calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 5000, 1) + calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 5000, 2) + calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 4000, 3) + calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 4000, 4) + calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 3500, 5) + calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 3500, 6) + calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 3500, 7),  calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 5000, 1) + calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 5000, 2) + calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 4000, 3) + calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 4000, 4) + calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 3500, 5) + calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 3500, 6) + calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 3500, 7) + calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 3500, 8), calcLogic.kwkBonus(state.elektrischeLeistung, calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 3500, 7), checkIfValid(state.BetriebsstundenBHKW * 1), 3500, checkIfDefined((state.elektrischeLeistung*state.BetriebsstundenBHKW/1000) * state.DavonInsNetzEingespeist/100), checkIfDefined(state.elektrischeLeistung*state.BetriebsstundenBHKW/1000))))),   
            ]} />
            <StaticAndDynamicOutputRow rowName="" bgColor="bg-gray-200" valueArray={[
                " "," "," "," "," "," "," "," "," "
            ]}/>
            <StaticAndDynamicOutputRow rowName="" bgColor="bg-gray-200" valueArray={[
                " "," "," "," "," "," "," "," "," "
            ]}/>
            <StaticAndDynamicOutputRow highlitedCol={highlitedCol} highlitedRow={highlitedRow} setHighlitedRow={setHighlitedRow} rowName="Wärme aus kesselanlage [€/a]" valueArray={[
                calcLogic.produktPreisteigerung(state.GesamtbedarfErdgasFürHeizungUndWarmwasser, state.BasisgaspreisInklAllerAbgabenNetto, state.SteigerungErdgasProA, 0),
                calcLogic.produktPreisteigerung(state.GesamtbedarfErdgasFürHeizungUndWarmwasser, state.BasisgaspreisInklAllerAbgabenNetto, state.SteigerungErdgasProA, 1),
                calcLogic.produktPreisteigerung(state.GesamtbedarfErdgasFürHeizungUndWarmwasser, state.BasisgaspreisInklAllerAbgabenNetto, state.SteigerungErdgasProA, 2),
                calcLogic.produktPreisteigerung(state.GesamtbedarfErdgasFürHeizungUndWarmwasser, state.BasisgaspreisInklAllerAbgabenNetto, state.SteigerungErdgasProA, 3),
                calcLogic.produktPreisteigerung(state.GesamtbedarfErdgasFürHeizungUndWarmwasser, state.BasisgaspreisInklAllerAbgabenNetto, state.SteigerungErdgasProA, 4),
                calcLogic.produktPreisteigerung(state.GesamtbedarfErdgasFürHeizungUndWarmwasser, state.BasisgaspreisInklAllerAbgabenNetto, state.SteigerungErdgasProA, 5),
                calcLogic.produktPreisteigerung(state.GesamtbedarfErdgasFürHeizungUndWarmwasser, state.BasisgaspreisInklAllerAbgabenNetto, state.SteigerungErdgasProA, 6),
                calcLogic.produktPreisteigerung(state.GesamtbedarfErdgasFürHeizungUndWarmwasser, state.BasisgaspreisInklAllerAbgabenNetto, state.SteigerungErdgasProA, 7),
                calcLogic.produktPreisteigerung(state.GesamtbedarfErdgasFürHeizungUndWarmwasser, state.BasisgaspreisInklAllerAbgabenNetto, state.SteigerungErdgasProA, 8),
            ]} />
            <StaticAndDynamicOutputRow highlitedCol={highlitedCol} highlitedRow={highlitedRow} setHighlitedRow={setHighlitedRow} rowName="Stromkosten [€/a]" valueArray={[
                calcLogic.produktPreisteigerung(state.GesamtbedarfStrom, checkIfDefined((state.DurchschnittspreisBezug + state.Stromsteuer + state.EEGUmlage + state.KWKAufschlagCa + state.SonstigeAbgaben) * 10), state.SteigerungStromProA, 0),
                calcLogic.produktPreisteigerung(state.GesamtbedarfStrom, checkIfDefined((state.DurchschnittspreisBezug + state.Stromsteuer + state.EEGUmlage + state.KWKAufschlagCa + state.SonstigeAbgaben) * 10), state.SteigerungStromProA, 1),
                calcLogic.produktPreisteigerung(state.GesamtbedarfStrom, checkIfDefined((state.DurchschnittspreisBezug + state.Stromsteuer + state.EEGUmlage + state.KWKAufschlagCa + state.SonstigeAbgaben) * 10), state.SteigerungStromProA, 2),
                calcLogic.produktPreisteigerung(state.GesamtbedarfStrom, checkIfDefined((state.DurchschnittspreisBezug + state.Stromsteuer + state.EEGUmlage + state.KWKAufschlagCa + state.SonstigeAbgaben) * 10), state.SteigerungStromProA, 3),
                calcLogic.produktPreisteigerung(state.GesamtbedarfStrom, checkIfDefined((state.DurchschnittspreisBezug + state.Stromsteuer + state.EEGUmlage + state.KWKAufschlagCa + state.SonstigeAbgaben) * 10), state.SteigerungStromProA, 4),
                calcLogic.produktPreisteigerung(state.GesamtbedarfStrom, checkIfDefined((state.DurchschnittspreisBezug + state.Stromsteuer + state.EEGUmlage + state.KWKAufschlagCa + state.SonstigeAbgaben) * 10), state.SteigerungStromProA, 5),
                calcLogic.produktPreisteigerung(state.GesamtbedarfStrom, checkIfDefined((state.DurchschnittspreisBezug + state.Stromsteuer + state.EEGUmlage + state.KWKAufschlagCa + state.SonstigeAbgaben) * 10), state.SteigerungStromProA, 6),
                calcLogic.produktPreisteigerung(state.GesamtbedarfStrom, checkIfDefined((state.DurchschnittspreisBezug + state.Stromsteuer + state.EEGUmlage + state.KWKAufschlagCa + state.SonstigeAbgaben) * 10), state.SteigerungStromProA, 7),
                calcLogic.produktPreisteigerung(state.GesamtbedarfStrom, checkIfDefined((state.DurchschnittspreisBezug + state.Stromsteuer + state.EEGUmlage + state.KWKAufschlagCa + state.SonstigeAbgaben) * 10), state.SteigerungStromProA, 8),
            ]} />
            <StaticAndDynamicOutputRow highlitedCol={highlitedCol} highlitedRow={highlitedRow} setHighlitedRow={setHighlitedRow} rowName="Erdgasgrundpreis [€/a]" valueArray={[
                calcLogic.preisteigungsFunktion(state.Erdgasgrundpreis, state.SteigerungErdgasProA, 0),
                calcLogic.preisteigungsFunktion(state.Erdgasgrundpreis, state.SteigerungErdgasProA, 1),
                calcLogic.preisteigungsFunktion(state.Erdgasgrundpreis, state.SteigerungErdgasProA, 2),
                calcLogic.preisteigungsFunktion(state.Erdgasgrundpreis, state.SteigerungErdgasProA, 3),
                calcLogic.preisteigungsFunktion(state.Erdgasgrundpreis, state.SteigerungErdgasProA, 4),
                calcLogic.preisteigungsFunktion(state.Erdgasgrundpreis, state.SteigerungErdgasProA, 5),
                calcLogic.preisteigungsFunktion(state.Erdgasgrundpreis, state.SteigerungErdgasProA, 6),
                calcLogic.preisteigungsFunktion(state.Erdgasgrundpreis, state.SteigerungErdgasProA, 7),
                calcLogic.preisteigungsFunktion(state.Erdgasgrundpreis, state.SteigerungErdgasProA, 8),
            ]}
            />
            <StaticAndDynamicOutputRow highlitedCol={highlitedCol} highlitedRow={highlitedRow} setHighlitedRow={setHighlitedRow} rowName="zus. CO2-Kosten (BEHG) [€/a]" valueArray={[
               Math.round( calcLogic.emissionenB7(state.GesamtbedarfErdgasFürHeizungUndWarmwasser) * 25),
               Math.round( calcLogic.emissionenB7(state.GesamtbedarfErdgasFürHeizungUndWarmwasser) * 30),
               Math.round( calcLogic.emissionenB7(state.GesamtbedarfErdgasFürHeizungUndWarmwasser) * 35),
               Math.round( calcLogic.emissionenB7(state.GesamtbedarfErdgasFürHeizungUndWarmwasser) * 45),
               Math.round( calcLogic.emissionenB7(state.GesamtbedarfErdgasFürHeizungUndWarmwasser) * 55),
               Math.round( calcLogic.emissionenB7(state.GesamtbedarfErdgasFürHeizungUndWarmwasser) * 55),
               Math.round( calcLogic.emissionenB7(state.GesamtbedarfErdgasFürHeizungUndWarmwasser) * 55),
               Math.round( calcLogic.emissionenB7(state.GesamtbedarfErdgasFürHeizungUndWarmwasser) * 55),
               Math.round( calcLogic.emissionenB7(state.GesamtbedarfErdgasFürHeizungUndWarmwasser) * 55),
            ]} />
            <StaticAndDynamicOutputRow highlitedCol={highlitedCol} highlitedRow={highlitedRow} setHighlitedRow={setHighlitedRow} bold={true} rowName="Summe [€/a]" valueArray={[
                calcLogic.produktPreisteigerung(state.GesamtbedarfErdgasFürHeizungUndWarmwasser, state.BasisgaspreisInklAllerAbgabenNetto, state.SteigerungErdgasProA, 0) + calcLogic.produktPreisteigerung(state.GesamtbedarfStrom, checkIfDefined((state.DurchschnittspreisBezug + state.Stromsteuer + state.EEGUmlage + state.KWKAufschlagCa + state.SonstigeAbgaben) * 10), state.SteigerungStromProA, 0) + calcLogic.preisteigungsFunktion(state.Erdgasgrundpreis, state.SteigerungErdgasProA, 0) + Math.round( calcLogic.emissionenB7(state.GesamtbedarfErdgasFürHeizungUndWarmwasser) * 25),
                calcLogic.produktPreisteigerung(state.GesamtbedarfErdgasFürHeizungUndWarmwasser, state.BasisgaspreisInklAllerAbgabenNetto, state.SteigerungErdgasProA, 1) + calcLogic.produktPreisteigerung(state.GesamtbedarfStrom, checkIfDefined((state.DurchschnittspreisBezug + state.Stromsteuer + state.EEGUmlage + state.KWKAufschlagCa + state.SonstigeAbgaben) * 10), state.SteigerungStromProA, 1) + calcLogic.preisteigungsFunktion(state.Erdgasgrundpreis, state.SteigerungErdgasProA, 1) + Math.round( calcLogic.emissionenB7(state.GesamtbedarfErdgasFürHeizungUndWarmwasser) * 30),
                calcLogic.produktPreisteigerung(state.GesamtbedarfErdgasFürHeizungUndWarmwasser, state.BasisgaspreisInklAllerAbgabenNetto, state.SteigerungErdgasProA, 2) + calcLogic.produktPreisteigerung(state.GesamtbedarfStrom, checkIfDefined((state.DurchschnittspreisBezug + state.Stromsteuer + state.EEGUmlage + state.KWKAufschlagCa + state.SonstigeAbgaben) * 10), state.SteigerungStromProA, 2) + calcLogic.preisteigungsFunktion(state.Erdgasgrundpreis, state.SteigerungErdgasProA, 2) + Math.round( calcLogic.emissionenB7(state.GesamtbedarfErdgasFürHeizungUndWarmwasser) * 35),
                calcLogic.produktPreisteigerung(state.GesamtbedarfErdgasFürHeizungUndWarmwasser, state.BasisgaspreisInklAllerAbgabenNetto, state.SteigerungErdgasProA, 3) + calcLogic.produktPreisteigerung(state.GesamtbedarfStrom, checkIfDefined((state.DurchschnittspreisBezug + state.Stromsteuer + state.EEGUmlage + state.KWKAufschlagCa + state.SonstigeAbgaben) * 10), state.SteigerungStromProA, 3) + calcLogic.preisteigungsFunktion(state.Erdgasgrundpreis, state.SteigerungErdgasProA, 3) + Math.round( calcLogic.emissionenB7(state.GesamtbedarfErdgasFürHeizungUndWarmwasser) * 45),
                calcLogic.produktPreisteigerung(state.GesamtbedarfErdgasFürHeizungUndWarmwasser, state.BasisgaspreisInklAllerAbgabenNetto, state.SteigerungErdgasProA, 4) + calcLogic.produktPreisteigerung(state.GesamtbedarfStrom, checkIfDefined((state.DurchschnittspreisBezug + state.Stromsteuer + state.EEGUmlage + state.KWKAufschlagCa + state.SonstigeAbgaben) * 10), state.SteigerungStromProA, 4) + calcLogic.preisteigungsFunktion(state.Erdgasgrundpreis, state.SteigerungErdgasProA, 4) + Math.round( calcLogic.emissionenB7(state.GesamtbedarfErdgasFürHeizungUndWarmwasser) * 55),
                calcLogic.produktPreisteigerung(state.GesamtbedarfErdgasFürHeizungUndWarmwasser, state.BasisgaspreisInklAllerAbgabenNetto, state.SteigerungErdgasProA, 5) + calcLogic.produktPreisteigerung(state.GesamtbedarfStrom, checkIfDefined((state.DurchschnittspreisBezug + state.Stromsteuer + state.EEGUmlage + state.KWKAufschlagCa + state.SonstigeAbgaben) * 10), state.SteigerungStromProA, 5) + calcLogic.preisteigungsFunktion(state.Erdgasgrundpreis, state.SteigerungErdgasProA, 5) + Math.round( calcLogic.emissionenB7(state.GesamtbedarfErdgasFürHeizungUndWarmwasser) * 55),
                calcLogic.produktPreisteigerung(state.GesamtbedarfErdgasFürHeizungUndWarmwasser, state.BasisgaspreisInklAllerAbgabenNetto, state.SteigerungErdgasProA, 6) + calcLogic.produktPreisteigerung(state.GesamtbedarfStrom, checkIfDefined((state.DurchschnittspreisBezug + state.Stromsteuer + state.EEGUmlage + state.KWKAufschlagCa + state.SonstigeAbgaben) * 10), state.SteigerungStromProA, 6) + calcLogic.preisteigungsFunktion(state.Erdgasgrundpreis, state.SteigerungErdgasProA, 6) + Math.round( calcLogic.emissionenB7(state.GesamtbedarfErdgasFürHeizungUndWarmwasser) * 55),
                calcLogic.produktPreisteigerung(state.GesamtbedarfErdgasFürHeizungUndWarmwasser, state.BasisgaspreisInklAllerAbgabenNetto, state.SteigerungErdgasProA, 7) + calcLogic.produktPreisteigerung(state.GesamtbedarfStrom, checkIfDefined((state.DurchschnittspreisBezug + state.Stromsteuer + state.EEGUmlage + state.KWKAufschlagCa + state.SonstigeAbgaben) * 10), state.SteigerungStromProA, 7) + calcLogic.preisteigungsFunktion(state.Erdgasgrundpreis, state.SteigerungErdgasProA, 7) + Math.round( calcLogic.emissionenB7(state.GesamtbedarfErdgasFürHeizungUndWarmwasser) * 55),
                calcLogic.produktPreisteigerung(state.GesamtbedarfErdgasFürHeizungUndWarmwasser, state.BasisgaspreisInklAllerAbgabenNetto, state.SteigerungErdgasProA, 8) + calcLogic.produktPreisteigerung(state.GesamtbedarfStrom, checkIfDefined((state.DurchschnittspreisBezug + state.Stromsteuer + state.EEGUmlage + state.KWKAufschlagCa + state.SonstigeAbgaben) * 10), state.SteigerungStromProA, 8) + calcLogic.preisteigungsFunktion(state.Erdgasgrundpreis, state.SteigerungErdgasProA, 8) + Math.round( calcLogic.emissionenB7(state.GesamtbedarfErdgasFürHeizungUndWarmwasser) * 55),
            ]} />
            
            <StaticAndDynamicOutputRow highlitedCol={highlitedCol} highlitedRow={highlitedRow} setHighlitedRow={setHighlitedRow} bold={true} rowName="Ergebnis [€/a]" valueArray={[
                -1 * Math.round((calcLogic.rmz(state.KapitalzinsDerFinazierendenBank/100, state.Finanzierungszeitraum, state.InvestitionLautAnbieter, 0,0) * (-1) + calcLogic.preisteigungsFunktion(state.BetriebsstundenBHKW * state.Vollwartung, state.PreissteigerungenWartungProA, 0) + complicatedData("VollrevisionDaten", state)[0] + calcLogic.preisteigungsFunktion((state.BasisgaspreisInklAllerAbgabenNetto * checkIfDefined(bhkwState[state.elektrischeLeistung].brennstoffleistungKWHi * state.BetriebsstundenBHKW/1000 * 1.107, true)), state.SteigerungErdgasProA, 0) + calcLogic.preisteigungsFunktion(state.BasisgaspreisInklAllerAbgabenNetto * calcLogic.brennstoffeinsatzImKessel(checkIfDefined(bhkwState[state.elektrischeLeistung].thermischeLeistung*state.BetriebsstundenBHKW/1000), checkIfDefined(state.GesamtbedarfErdgasFürHeizungUndWarmwasser/(1.107/state.JahresanlagennutzungsgradWärmeerzeuger * 100)), state.JahresanlagennutzungsgradWärmeerzeuger), state.SteigerungErdgasProA, 0) + calcLogic.preisteigungsFunktion((checkIfDefined((state.DurchschnittspreisBezug + state.Stromsteuer + state.EEGUmlage + state.KWKAufschlagCa + state.SonstigeAbgaben) * 10) * calcLogic.summeReststrombezug(state.GesamtbedarfStrom, checkIfDefined(state.elektrischeLeistung*state.BetriebsstundenBHKW/1000), checkIfDefined((state.elektrischeLeistung*state.BetriebsstundenBHKW/1000) * state.DavonInsNetzEingespeist/100))), state.SteigerungStromProA, 0) + calcLogic.preisteigungsFunktion(state.Erdgasgrundpreis, state.SteigerungErdgasProA, 0) + calcLogic.EEGOutput(state.EEGUmlage, checkIfDefined(state.elektrischeLeistung*state.BetriebsstundenBHKW/1000), checkIfDefined((state.elektrischeLeistung*state.BetriebsstundenBHKW/1000) * state.DavonInsNetzEingespeist/100), state.AnteilEEGUmlageEigenstrom) + calcLogic.rückerstattungErdgassteuer(checkIfDefined(bhkwState[state.elektrischeLeistung].brennstoffleistungKWHi * state.BetriebsstundenBHKW/1000 * 1.107, true), state.ErdgassteuerRückerstattung) - checkIfDefined((state.elektrischeLeistung*state.BetriebsstundenBHKW/1000) * state.DavonInsNetzEingespeist/100) * checkIfDefined(state.EEXVergütungInklVermNetznutzung) + checkIfDefined(calcLogic.emissionenC7(calcLogic.brennstoffeinsatzImKessel(checkIfDefined(bhkwState[state.elektrischeLeistung].thermischeLeistung*state.BetriebsstundenBHKW/1000), checkIfDefined(state.GesamtbedarfErdgasFürHeizungUndWarmwasser/(1.107/state.JahresanlagennutzungsgradWärmeerzeuger * 100)), state.JahresanlagennutzungsgradWärmeerzeuger), checkIfDefined(bhkwState[state.elektrischeLeistung].brennstoffleistungKWHi * state.BetriebsstundenBHKW/1000 * 1.107, true))) * 25 + calcLogic.kwkBonus(state.elektrischeLeistung, calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 5000, 1), checkIfValid(state.BetriebsstundenBHKW * 1), 5000, checkIfDefined((state.elektrischeLeistung*state.BetriebsstundenBHKW/1000) * state.DavonInsNetzEingespeist/100), checkIfDefined(state.elektrischeLeistung*state.BetriebsstundenBHKW/1000))) - (calcLogic.produktPreisteigerung(state.GesamtbedarfErdgasFürHeizungUndWarmwasser, state.BasisgaspreisInklAllerAbgabenNetto, state.SteigerungErdgasProA, 0) + calcLogic.produktPreisteigerung(state.GesamtbedarfStrom, checkIfDefined((state.DurchschnittspreisBezug + state.Stromsteuer + state.EEGUmlage + state.KWKAufschlagCa + state.SonstigeAbgaben) * 10), state.SteigerungStromProA, 0) + calcLogic.preisteigungsFunktion(state.Erdgasgrundpreis, state.SteigerungErdgasProA, 0) + Math.round( calcLogic.emissionenB7(state.GesamtbedarfErdgasFürHeizungUndWarmwasser) * 25))),
                -1 * Math.round((calcLogic.rmz(state.KapitalzinsDerFinazierendenBank/100, state.Finanzierungszeitraum, state.InvestitionLautAnbieter, 0,0) * (-1) + calcLogic.preisteigungsFunktion(state.BetriebsstundenBHKW * state.Vollwartung, state.PreissteigerungenWartungProA, 1) + complicatedData("VollrevisionDaten", state)[1] + calcLogic.preisteigungsFunktion((state.BasisgaspreisInklAllerAbgabenNetto * checkIfDefined(bhkwState[state.elektrischeLeistung].brennstoffleistungKWHi * state.BetriebsstundenBHKW/1000 * 1.107, true)), state.SteigerungErdgasProA, 1) + calcLogic.preisteigungsFunktion(state.BasisgaspreisInklAllerAbgabenNetto * calcLogic.brennstoffeinsatzImKessel(checkIfDefined(bhkwState[state.elektrischeLeistung].thermischeLeistung*state.BetriebsstundenBHKW/1000), checkIfDefined(state.GesamtbedarfErdgasFürHeizungUndWarmwasser/(1.107/state.JahresanlagennutzungsgradWärmeerzeuger * 100)), state.JahresanlagennutzungsgradWärmeerzeuger), state.SteigerungErdgasProA, 1) + calcLogic.preisteigungsFunktion((checkIfDefined((state.DurchschnittspreisBezug + state.Stromsteuer + state.EEGUmlage + state.KWKAufschlagCa + state.SonstigeAbgaben) * 10) * calcLogic.summeReststrombezug(state.GesamtbedarfStrom, checkIfDefined(state.elektrischeLeistung*state.BetriebsstundenBHKW/1000), checkIfDefined((state.elektrischeLeistung*state.BetriebsstundenBHKW/1000) * state.DavonInsNetzEingespeist/100))), state.SteigerungStromProA, 1) + calcLogic.preisteigungsFunktion(state.Erdgasgrundpreis, state.SteigerungErdgasProA, 1) + calcLogic.EEGOutput(state.EEGUmlage, checkIfDefined(state.elektrischeLeistung*state.BetriebsstundenBHKW/1000), checkIfDefined((state.elektrischeLeistung*state.BetriebsstundenBHKW/1000) * state.DavonInsNetzEingespeist/100), state.AnteilEEGUmlageEigenstrom) + calcLogic.rückerstattungErdgassteuer(checkIfDefined(bhkwState[state.elektrischeLeistung].brennstoffleistungKWHi * state.BetriebsstundenBHKW/1000 * 1.107, true), state.ErdgassteuerRückerstattung) - checkIfDefined((state.elektrischeLeistung*state.BetriebsstundenBHKW/1000) * state.DavonInsNetzEingespeist/100) * checkIfDefined(state.EEXVergütungInklVermNetznutzung) + checkIfDefined(calcLogic.emissionenC7(calcLogic.brennstoffeinsatzImKessel(checkIfDefined(bhkwState[state.elektrischeLeistung].thermischeLeistung*state.BetriebsstundenBHKW/1000), checkIfDefined(state.GesamtbedarfErdgasFürHeizungUndWarmwasser/(1.107/state.JahresanlagennutzungsgradWärmeerzeuger * 100)), state.JahresanlagennutzungsgradWärmeerzeuger), checkIfDefined(bhkwState[state.elektrischeLeistung].brennstoffleistungKWHi * state.BetriebsstundenBHKW/1000 * 1.107, true))) * 30 + calcLogic.kwkBonus(state.elektrischeLeistung, calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 5000, 2), checkIfValid(state.BetriebsstundenBHKW * 1), 5000, checkIfDefined((state.elektrischeLeistung*state.BetriebsstundenBHKW/1000) * state.DavonInsNetzEingespeist/100), checkIfDefined(state.elektrischeLeistung*state.BetriebsstundenBHKW/1000))) - (calcLogic.produktPreisteigerung(state.GesamtbedarfErdgasFürHeizungUndWarmwasser, state.BasisgaspreisInklAllerAbgabenNetto, state.SteigerungErdgasProA, 1) + calcLogic.produktPreisteigerung(state.GesamtbedarfStrom, checkIfDefined((state.DurchschnittspreisBezug + state.Stromsteuer + state.EEGUmlage + state.KWKAufschlagCa + state.SonstigeAbgaben) * 10), state.SteigerungStromProA, 1) + calcLogic.preisteigungsFunktion(state.Erdgasgrundpreis, state.SteigerungErdgasProA, 1) + Math.round( calcLogic.emissionenB7(state.GesamtbedarfErdgasFürHeizungUndWarmwasser) * 30))),
                -1 * Math.round((calcLogic.rmz(state.KapitalzinsDerFinazierendenBank/100, state.Finanzierungszeitraum, state.InvestitionLautAnbieter, 0,0) * (-1) + calcLogic.preisteigungsFunktion(state.BetriebsstundenBHKW * state.Vollwartung, state.PreissteigerungenWartungProA, 2) + complicatedData("VollrevisionDaten", state)[2] + calcLogic.preisteigungsFunktion((state.BasisgaspreisInklAllerAbgabenNetto * checkIfDefined(bhkwState[state.elektrischeLeistung].brennstoffleistungKWHi * state.BetriebsstundenBHKW/1000 * 1.107, true)), state.SteigerungErdgasProA, 2) + calcLogic.preisteigungsFunktion(state.BasisgaspreisInklAllerAbgabenNetto * calcLogic.brennstoffeinsatzImKessel(checkIfDefined(bhkwState[state.elektrischeLeistung].thermischeLeistung*state.BetriebsstundenBHKW/1000), checkIfDefined(state.GesamtbedarfErdgasFürHeizungUndWarmwasser/(1.107/state.JahresanlagennutzungsgradWärmeerzeuger * 100)), state.JahresanlagennutzungsgradWärmeerzeuger), state.SteigerungErdgasProA, 2) + calcLogic.preisteigungsFunktion((checkIfDefined((state.DurchschnittspreisBezug + state.Stromsteuer + state.EEGUmlage + state.KWKAufschlagCa + state.SonstigeAbgaben) * 10) * calcLogic.summeReststrombezug(state.GesamtbedarfStrom, checkIfDefined(state.elektrischeLeistung*state.BetriebsstundenBHKW/1000), checkIfDefined((state.elektrischeLeistung*state.BetriebsstundenBHKW/1000) * state.DavonInsNetzEingespeist/100))), state.SteigerungStromProA, 2) + calcLogic.preisteigungsFunktion(state.Erdgasgrundpreis, state.SteigerungErdgasProA, 2) + calcLogic.EEGOutput(state.EEGUmlage, checkIfDefined(state.elektrischeLeistung*state.BetriebsstundenBHKW/1000), checkIfDefined((state.elektrischeLeistung*state.BetriebsstundenBHKW/1000) * state.DavonInsNetzEingespeist/100), state.AnteilEEGUmlageEigenstrom) + calcLogic.rückerstattungErdgassteuer(checkIfDefined(bhkwState[state.elektrischeLeistung].brennstoffleistungKWHi * state.BetriebsstundenBHKW/1000 * 1.107, true), state.ErdgassteuerRückerstattung) - checkIfDefined((state.elektrischeLeistung*state.BetriebsstundenBHKW/1000) * state.DavonInsNetzEingespeist/100) * checkIfDefined(state.EEXVergütungInklVermNetznutzung) + checkIfDefined(calcLogic.emissionenC7(calcLogic.brennstoffeinsatzImKessel(checkIfDefined(bhkwState[state.elektrischeLeistung].thermischeLeistung*state.BetriebsstundenBHKW/1000), checkIfDefined(state.GesamtbedarfErdgasFürHeizungUndWarmwasser/(1.107/state.JahresanlagennutzungsgradWärmeerzeuger * 100)), state.JahresanlagennutzungsgradWärmeerzeuger), checkIfDefined(bhkwState[state.elektrischeLeistung].brennstoffleistungKWHi * state.BetriebsstundenBHKW/1000 * 1.107, true))) * 35 + calcLogic.kwkBonus(state.elektrischeLeistung, calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 4000, 3), checkIfValid(state.BetriebsstundenBHKW * 1), 4000, checkIfDefined((state.elektrischeLeistung*state.BetriebsstundenBHKW/1000) * state.DavonInsNetzEingespeist/100), checkIfDefined(state.elektrischeLeistung*state.BetriebsstundenBHKW/1000))) - (calcLogic.produktPreisteigerung(state.GesamtbedarfErdgasFürHeizungUndWarmwasser, state.BasisgaspreisInklAllerAbgabenNetto, state.SteigerungErdgasProA, 2) + calcLogic.produktPreisteigerung(state.GesamtbedarfStrom, checkIfDefined((state.DurchschnittspreisBezug + state.Stromsteuer + state.EEGUmlage + state.KWKAufschlagCa + state.SonstigeAbgaben) * 10), state.SteigerungStromProA, 2) + calcLogic.preisteigungsFunktion(state.Erdgasgrundpreis, state.SteigerungErdgasProA, 2) + Math.round( calcLogic.emissionenB7(state.GesamtbedarfErdgasFürHeizungUndWarmwasser) * 35))),
                -1 * Math.round((calcLogic.rmz(state.KapitalzinsDerFinazierendenBank/100, state.Finanzierungszeitraum, state.InvestitionLautAnbieter, 0,0) * (-1) + calcLogic.preisteigungsFunktion(state.BetriebsstundenBHKW * state.Vollwartung, state.PreissteigerungenWartungProA, 3) + complicatedData("VollrevisionDaten", state)[3] + calcLogic.preisteigungsFunktion((state.BasisgaspreisInklAllerAbgabenNetto * checkIfDefined(bhkwState[state.elektrischeLeistung].brennstoffleistungKWHi * state.BetriebsstundenBHKW/1000 * 1.107, true)), state.SteigerungErdgasProA, 3) + calcLogic.preisteigungsFunktion(state.BasisgaspreisInklAllerAbgabenNetto * calcLogic.brennstoffeinsatzImKessel(checkIfDefined(bhkwState[state.elektrischeLeistung].thermischeLeistung*state.BetriebsstundenBHKW/1000), checkIfDefined(state.GesamtbedarfErdgasFürHeizungUndWarmwasser/(1.107/state.JahresanlagennutzungsgradWärmeerzeuger * 100)), state.JahresanlagennutzungsgradWärmeerzeuger), state.SteigerungErdgasProA, 3) + calcLogic.preisteigungsFunktion((checkIfDefined((state.DurchschnittspreisBezug + state.Stromsteuer + state.EEGUmlage + state.KWKAufschlagCa + state.SonstigeAbgaben) * 10) * calcLogic.summeReststrombezug(state.GesamtbedarfStrom, checkIfDefined(state.elektrischeLeistung*state.BetriebsstundenBHKW/1000), checkIfDefined((state.elektrischeLeistung*state.BetriebsstundenBHKW/1000) * state.DavonInsNetzEingespeist/100))), state.SteigerungStromProA, 3) + calcLogic.preisteigungsFunktion(state.Erdgasgrundpreis, state.SteigerungErdgasProA, 3) + calcLogic.EEGOutput(state.EEGUmlage, checkIfDefined(state.elektrischeLeistung*state.BetriebsstundenBHKW/1000), checkIfDefined((state.elektrischeLeistung*state.BetriebsstundenBHKW/1000) * state.DavonInsNetzEingespeist/100), state.AnteilEEGUmlageEigenstrom) + calcLogic.rückerstattungErdgassteuer(checkIfDefined(bhkwState[state.elektrischeLeistung].brennstoffleistungKWHi * state.BetriebsstundenBHKW/1000 * 1.107, true), state.ErdgassteuerRückerstattung) - checkIfDefined((state.elektrischeLeistung*state.BetriebsstundenBHKW/1000) * state.DavonInsNetzEingespeist/100) * checkIfDefined(state.EEXVergütungInklVermNetznutzung) + checkIfDefined(calcLogic.emissionenC7(calcLogic.brennstoffeinsatzImKessel(checkIfDefined(bhkwState[state.elektrischeLeistung].thermischeLeistung*state.BetriebsstundenBHKW/1000), checkIfDefined(state.GesamtbedarfErdgasFürHeizungUndWarmwasser/(1.107/state.JahresanlagennutzungsgradWärmeerzeuger * 100)), state.JahresanlagennutzungsgradWärmeerzeuger), checkIfDefined(bhkwState[state.elektrischeLeistung].brennstoffleistungKWHi * state.BetriebsstundenBHKW/1000 * 1.107, true))) * 45 + calcLogic.kwkBonus(state.elektrischeLeistung, calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 4000, 4), checkIfValid(state.BetriebsstundenBHKW * 1), 4000, checkIfDefined((state.elektrischeLeistung*state.BetriebsstundenBHKW/1000) * state.DavonInsNetzEingespeist/100), checkIfDefined(state.elektrischeLeistung*state.BetriebsstundenBHKW/1000))) - (calcLogic.produktPreisteigerung(state.GesamtbedarfErdgasFürHeizungUndWarmwasser, state.BasisgaspreisInklAllerAbgabenNetto, state.SteigerungErdgasProA, 3) + calcLogic.produktPreisteigerung(state.GesamtbedarfStrom, checkIfDefined((state.DurchschnittspreisBezug + state.Stromsteuer + state.EEGUmlage + state.KWKAufschlagCa + state.SonstigeAbgaben) * 10), state.SteigerungStromProA, 3) + calcLogic.preisteigungsFunktion(state.Erdgasgrundpreis, state.SteigerungErdgasProA, 3) + Math.round( calcLogic.emissionenB7(state.GesamtbedarfErdgasFürHeizungUndWarmwasser) * 45))),
                -1 * Math.round((calcLogic.rmz(state.KapitalzinsDerFinazierendenBank/100, state.Finanzierungszeitraum, state.InvestitionLautAnbieter, 0,0) * (-1) + calcLogic.preisteigungsFunktion(state.BetriebsstundenBHKW * state.Vollwartung, state.PreissteigerungenWartungProA, 4) + complicatedData("VollrevisionDaten", state)[4] + calcLogic.preisteigungsFunktion((state.BasisgaspreisInklAllerAbgabenNetto * checkIfDefined(bhkwState[state.elektrischeLeistung].brennstoffleistungKWHi * state.BetriebsstundenBHKW/1000 * 1.107, true)), state.SteigerungErdgasProA, 4) + calcLogic.preisteigungsFunktion(state.BasisgaspreisInklAllerAbgabenNetto * calcLogic.brennstoffeinsatzImKessel(checkIfDefined(bhkwState[state.elektrischeLeistung].thermischeLeistung*state.BetriebsstundenBHKW/1000), checkIfDefined(state.GesamtbedarfErdgasFürHeizungUndWarmwasser/(1.107/state.JahresanlagennutzungsgradWärmeerzeuger * 100)), state.JahresanlagennutzungsgradWärmeerzeuger), state.SteigerungErdgasProA, 4) + calcLogic.preisteigungsFunktion((checkIfDefined((state.DurchschnittspreisBezug + state.Stromsteuer + state.EEGUmlage + state.KWKAufschlagCa + state.SonstigeAbgaben) * 10) * calcLogic.summeReststrombezug(state.GesamtbedarfStrom, checkIfDefined(state.elektrischeLeistung*state.BetriebsstundenBHKW/1000), checkIfDefined((state.elektrischeLeistung*state.BetriebsstundenBHKW/1000) * state.DavonInsNetzEingespeist/100))), state.SteigerungStromProA, 4) + calcLogic.preisteigungsFunktion(state.Erdgasgrundpreis, state.SteigerungErdgasProA, 4) + calcLogic.EEGOutput(state.EEGUmlage, checkIfDefined(state.elektrischeLeistung*state.BetriebsstundenBHKW/1000), checkIfDefined((state.elektrischeLeistung*state.BetriebsstundenBHKW/1000) * state.DavonInsNetzEingespeist/100), state.AnteilEEGUmlageEigenstrom) + calcLogic.rückerstattungErdgassteuer(checkIfDefined(bhkwState[state.elektrischeLeistung].brennstoffleistungKWHi * state.BetriebsstundenBHKW/1000 * 1.107, true), state.ErdgassteuerRückerstattung) - checkIfDefined((state.elektrischeLeistung*state.BetriebsstundenBHKW/1000) * state.DavonInsNetzEingespeist/100) * checkIfDefined(state.EEXVergütungInklVermNetznutzung) + checkIfDefined(calcLogic.emissionenC7(calcLogic.brennstoffeinsatzImKessel(checkIfDefined(bhkwState[state.elektrischeLeistung].thermischeLeistung*state.BetriebsstundenBHKW/1000), checkIfDefined(state.GesamtbedarfErdgasFürHeizungUndWarmwasser/(1.107/state.JahresanlagennutzungsgradWärmeerzeuger * 100)), state.JahresanlagennutzungsgradWärmeerzeuger), checkIfDefined(bhkwState[state.elektrischeLeistung].brennstoffleistungKWHi * state.BetriebsstundenBHKW/1000 * 1.107, true))) * 55 + calcLogic.kwkBonus(state.elektrischeLeistung, calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 3500, 5), checkIfValid(state.BetriebsstundenBHKW * 1), 3500, checkIfDefined((state.elektrischeLeistung*state.BetriebsstundenBHKW/1000) * state.DavonInsNetzEingespeist/100), checkIfDefined(state.elektrischeLeistung*state.BetriebsstundenBHKW/1000))) - (calcLogic.produktPreisteigerung(state.GesamtbedarfErdgasFürHeizungUndWarmwasser, state.BasisgaspreisInklAllerAbgabenNetto, state.SteigerungErdgasProA, 4) + calcLogic.produktPreisteigerung(state.GesamtbedarfStrom, checkIfDefined((state.DurchschnittspreisBezug + state.Stromsteuer + state.EEGUmlage + state.KWKAufschlagCa + state.SonstigeAbgaben) * 10), state.SteigerungStromProA, 4) + calcLogic.preisteigungsFunktion(state.Erdgasgrundpreis, state.SteigerungErdgasProA, 4) + Math.round( calcLogic.emissionenB7(state.GesamtbedarfErdgasFürHeizungUndWarmwasser) * 55))),
                -1 * Math.round((calcLogic.rmz(state.KapitalzinsDerFinazierendenBank/100, state.Finanzierungszeitraum, state.InvestitionLautAnbieter, 0,0) * (-1) + calcLogic.preisteigungsFunktion(state.BetriebsstundenBHKW * state.Vollwartung, state.PreissteigerungenWartungProA, 5) + complicatedData("VollrevisionDaten", state)[5] + calcLogic.preisteigungsFunktion((state.BasisgaspreisInklAllerAbgabenNetto * checkIfDefined(bhkwState[state.elektrischeLeistung].brennstoffleistungKWHi * state.BetriebsstundenBHKW/1000 * 1.107, true)), state.SteigerungErdgasProA, 5) + calcLogic.preisteigungsFunktion(state.BasisgaspreisInklAllerAbgabenNetto * calcLogic.brennstoffeinsatzImKessel(checkIfDefined(bhkwState[state.elektrischeLeistung].thermischeLeistung*state.BetriebsstundenBHKW/1000), checkIfDefined(state.GesamtbedarfErdgasFürHeizungUndWarmwasser/(1.107/state.JahresanlagennutzungsgradWärmeerzeuger * 100)), state.JahresanlagennutzungsgradWärmeerzeuger), state.SteigerungErdgasProA, 5) + calcLogic.preisteigungsFunktion((checkIfDefined((state.DurchschnittspreisBezug + state.Stromsteuer + state.EEGUmlage + state.KWKAufschlagCa + state.SonstigeAbgaben) * 10) * calcLogic.summeReststrombezug(state.GesamtbedarfStrom, checkIfDefined(state.elektrischeLeistung*state.BetriebsstundenBHKW/1000), checkIfDefined((state.elektrischeLeistung*state.BetriebsstundenBHKW/1000) * state.DavonInsNetzEingespeist/100))), state.SteigerungStromProA, 5) + calcLogic.preisteigungsFunktion(state.Erdgasgrundpreis, state.SteigerungErdgasProA, 5) + calcLogic.EEGOutput(state.EEGUmlage, checkIfDefined(state.elektrischeLeistung*state.BetriebsstundenBHKW/1000), checkIfDefined((state.elektrischeLeistung*state.BetriebsstundenBHKW/1000) * state.DavonInsNetzEingespeist/100), state.AnteilEEGUmlageEigenstrom) + calcLogic.rückerstattungErdgassteuer(checkIfDefined(bhkwState[state.elektrischeLeistung].brennstoffleistungKWHi * state.BetriebsstundenBHKW/1000 * 1.107, true), state.ErdgassteuerRückerstattung) - checkIfDefined((state.elektrischeLeistung*state.BetriebsstundenBHKW/1000) * state.DavonInsNetzEingespeist/100) * checkIfDefined(state.EEXVergütungInklVermNetznutzung) + checkIfDefined(calcLogic.emissionenC7(calcLogic.brennstoffeinsatzImKessel(checkIfDefined(bhkwState[state.elektrischeLeistung].thermischeLeistung*state.BetriebsstundenBHKW/1000), checkIfDefined(state.GesamtbedarfErdgasFürHeizungUndWarmwasser/(1.107/state.JahresanlagennutzungsgradWärmeerzeuger * 100)), state.JahresanlagennutzungsgradWärmeerzeuger), checkIfDefined(bhkwState[state.elektrischeLeistung].brennstoffleistungKWHi * state.BetriebsstundenBHKW/1000 * 1.107, true))) * 55 + calcLogic.kwkBonus(state.elektrischeLeistung, calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 3500, 6), checkIfValid(state.BetriebsstundenBHKW * 1), 3500, checkIfDefined((state.elektrischeLeistung*state.BetriebsstundenBHKW/1000) * state.DavonInsNetzEingespeist/100), checkIfDefined(state.elektrischeLeistung*state.BetriebsstundenBHKW/1000))) - (calcLogic.produktPreisteigerung(state.GesamtbedarfErdgasFürHeizungUndWarmwasser, state.BasisgaspreisInklAllerAbgabenNetto, state.SteigerungErdgasProA, 5) + calcLogic.produktPreisteigerung(state.GesamtbedarfStrom, checkIfDefined((state.DurchschnittspreisBezug + state.Stromsteuer + state.EEGUmlage + state.KWKAufschlagCa + state.SonstigeAbgaben) * 10), state.SteigerungStromProA, 5) + calcLogic.preisteigungsFunktion(state.Erdgasgrundpreis, state.SteigerungErdgasProA, 5) + Math.round( calcLogic.emissionenB7(state.GesamtbedarfErdgasFürHeizungUndWarmwasser) * 55))),
                -1 * Math.round((calcLogic.rmz(state.KapitalzinsDerFinazierendenBank/100, state.Finanzierungszeitraum, state.InvestitionLautAnbieter, 0,0) * (-1) + calcLogic.preisteigungsFunktion(state.BetriebsstundenBHKW * state.Vollwartung, state.PreissteigerungenWartungProA, 6) + complicatedData("VollrevisionDaten", state)[6] + calcLogic.preisteigungsFunktion((state.BasisgaspreisInklAllerAbgabenNetto * checkIfDefined(bhkwState[state.elektrischeLeistung].brennstoffleistungKWHi * state.BetriebsstundenBHKW/1000 * 1.107, true)), state.SteigerungErdgasProA, 6) + calcLogic.preisteigungsFunktion(state.BasisgaspreisInklAllerAbgabenNetto * calcLogic.brennstoffeinsatzImKessel(checkIfDefined(bhkwState[state.elektrischeLeistung].thermischeLeistung*state.BetriebsstundenBHKW/1000), checkIfDefined(state.GesamtbedarfErdgasFürHeizungUndWarmwasser/(1.107/state.JahresanlagennutzungsgradWärmeerzeuger * 100)), state.JahresanlagennutzungsgradWärmeerzeuger), state.SteigerungErdgasProA, 6) + calcLogic.preisteigungsFunktion((checkIfDefined((state.DurchschnittspreisBezug + state.Stromsteuer + state.EEGUmlage + state.KWKAufschlagCa + state.SonstigeAbgaben) * 10) * calcLogic.summeReststrombezug(state.GesamtbedarfStrom, checkIfDefined(state.elektrischeLeistung*state.BetriebsstundenBHKW/1000), checkIfDefined((state.elektrischeLeistung*state.BetriebsstundenBHKW/1000) * state.DavonInsNetzEingespeist/100))), state.SteigerungStromProA, 6) + calcLogic.preisteigungsFunktion(state.Erdgasgrundpreis, state.SteigerungErdgasProA, 6) + calcLogic.EEGOutput(state.EEGUmlage, checkIfDefined(state.elektrischeLeistung*state.BetriebsstundenBHKW/1000), checkIfDefined((state.elektrischeLeistung*state.BetriebsstundenBHKW/1000) * state.DavonInsNetzEingespeist/100), state.AnteilEEGUmlageEigenstrom) + calcLogic.rückerstattungErdgassteuer(checkIfDefined(bhkwState[state.elektrischeLeistung].brennstoffleistungKWHi * state.BetriebsstundenBHKW/1000 * 1.107, true), state.ErdgassteuerRückerstattung) - checkIfDefined((state.elektrischeLeistung*state.BetriebsstundenBHKW/1000) * state.DavonInsNetzEingespeist/100) * checkIfDefined(state.EEXVergütungInklVermNetznutzung) + checkIfDefined(calcLogic.emissionenC7(calcLogic.brennstoffeinsatzImKessel(checkIfDefined(bhkwState[state.elektrischeLeistung].thermischeLeistung*state.BetriebsstundenBHKW/1000), checkIfDefined(state.GesamtbedarfErdgasFürHeizungUndWarmwasser/(1.107/state.JahresanlagennutzungsgradWärmeerzeuger * 100)), state.JahresanlagennutzungsgradWärmeerzeuger), checkIfDefined(bhkwState[state.elektrischeLeistung].brennstoffleistungKWHi * state.BetriebsstundenBHKW/1000 * 1.107, true))) * 55 + calcLogic.kwkBonus(state.elektrischeLeistung, calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 3500, 7), checkIfValid(state.BetriebsstundenBHKW * 1), 3500, checkIfDefined((state.elektrischeLeistung*state.BetriebsstundenBHKW/1000) * state.DavonInsNetzEingespeist/100), checkIfDefined(state.elektrischeLeistung*state.BetriebsstundenBHKW/1000))) - (calcLogic.produktPreisteigerung(state.GesamtbedarfErdgasFürHeizungUndWarmwasser, state.BasisgaspreisInklAllerAbgabenNetto, state.SteigerungErdgasProA, 6) + calcLogic.produktPreisteigerung(state.GesamtbedarfStrom, checkIfDefined((state.DurchschnittspreisBezug + state.Stromsteuer + state.EEGUmlage + state.KWKAufschlagCa + state.SonstigeAbgaben) * 10), state.SteigerungStromProA, 6) + calcLogic.preisteigungsFunktion(state.Erdgasgrundpreis, state.SteigerungErdgasProA, 6) + Math.round( calcLogic.emissionenB7(state.GesamtbedarfErdgasFürHeizungUndWarmwasser) * 55))),
                -1 * Math.round((calcLogic.rmz(state.KapitalzinsDerFinazierendenBank/100, state.Finanzierungszeitraum, state.InvestitionLautAnbieter, 0,0) * (-1) + calcLogic.preisteigungsFunktion(state.BetriebsstundenBHKW * state.Vollwartung, state.PreissteigerungenWartungProA, 7) + complicatedData("VollrevisionDaten", state)[7] + calcLogic.preisteigungsFunktion((state.BasisgaspreisInklAllerAbgabenNetto * checkIfDefined(bhkwState[state.elektrischeLeistung].brennstoffleistungKWHi * state.BetriebsstundenBHKW/1000 * 1.107, true)), state.SteigerungErdgasProA, 7) + calcLogic.preisteigungsFunktion(state.BasisgaspreisInklAllerAbgabenNetto * calcLogic.brennstoffeinsatzImKessel(checkIfDefined(bhkwState[state.elektrischeLeistung].thermischeLeistung*state.BetriebsstundenBHKW/1000), checkIfDefined(state.GesamtbedarfErdgasFürHeizungUndWarmwasser/(1.107/state.JahresanlagennutzungsgradWärmeerzeuger * 100)), state.JahresanlagennutzungsgradWärmeerzeuger), state.SteigerungErdgasProA, 7) + calcLogic.preisteigungsFunktion((checkIfDefined((state.DurchschnittspreisBezug + state.Stromsteuer + state.EEGUmlage + state.KWKAufschlagCa + state.SonstigeAbgaben) * 10) * calcLogic.summeReststrombezug(state.GesamtbedarfStrom, checkIfDefined(state.elektrischeLeistung*state.BetriebsstundenBHKW/1000), checkIfDefined((state.elektrischeLeistung*state.BetriebsstundenBHKW/1000) * state.DavonInsNetzEingespeist/100))), state.SteigerungStromProA, 7) + calcLogic.preisteigungsFunktion(state.Erdgasgrundpreis, state.SteigerungErdgasProA, 7) + calcLogic.EEGOutput(state.EEGUmlage, checkIfDefined(state.elektrischeLeistung*state.BetriebsstundenBHKW/1000), checkIfDefined((state.elektrischeLeistung*state.BetriebsstundenBHKW/1000) * state.DavonInsNetzEingespeist/100), state.AnteilEEGUmlageEigenstrom) + calcLogic.rückerstattungErdgassteuer(checkIfDefined(bhkwState[state.elektrischeLeistung].brennstoffleistungKWHi * state.BetriebsstundenBHKW/1000 * 1.107, true), state.ErdgassteuerRückerstattung) - checkIfDefined((state.elektrischeLeistung*state.BetriebsstundenBHKW/1000) * state.DavonInsNetzEingespeist/100) * checkIfDefined(state.EEXVergütungInklVermNetznutzung) + checkIfDefined(calcLogic.emissionenC7(calcLogic.brennstoffeinsatzImKessel(checkIfDefined(bhkwState[state.elektrischeLeistung].thermischeLeistung*state.BetriebsstundenBHKW/1000), checkIfDefined(state.GesamtbedarfErdgasFürHeizungUndWarmwasser/(1.107/state.JahresanlagennutzungsgradWärmeerzeuger * 100)), state.JahresanlagennutzungsgradWärmeerzeuger), checkIfDefined(bhkwState[state.elektrischeLeistung].brennstoffleistungKWHi * state.BetriebsstundenBHKW/1000 * 1.107, true))) * 55 + calcLogic.kwkSpecial(calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 3500, 7), calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 5000, 1) + calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 5000, 2) + calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 4000, 3) + calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 4000, 4) + calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 3500, 5) + calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 3500, 6) + calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 3500, 7),  calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 5000, 1) + calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 5000, 2) + calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 4000, 3) + calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 4000, 4) + calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 3500, 5) + calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 3500, 6) + calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 3500, 7) + calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 3500, 8), calcLogic.kwkBonus(state.elektrischeLeistung, calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 3500, 7), checkIfValid(state.BetriebsstundenBHKW * 1), 3500, checkIfDefined((state.elektrischeLeistung*state.BetriebsstundenBHKW/1000) * state.DavonInsNetzEingespeist/100), checkIfDefined(state.elektrischeLeistung*state.BetriebsstundenBHKW/1000)))) - (calcLogic.produktPreisteigerung(state.GesamtbedarfErdgasFürHeizungUndWarmwasser, state.BasisgaspreisInklAllerAbgabenNetto, state.SteigerungErdgasProA, 7) + calcLogic.produktPreisteigerung(state.GesamtbedarfStrom, checkIfDefined((state.DurchschnittspreisBezug + state.Stromsteuer + state.EEGUmlage + state.KWKAufschlagCa + state.SonstigeAbgaben) * 10), state.SteigerungStromProA, 7) + calcLogic.preisteigungsFunktion(state.Erdgasgrundpreis, state.SteigerungErdgasProA, 7) + Math.round( calcLogic.emissionenB7(state.GesamtbedarfErdgasFürHeizungUndWarmwasser) * 55))),
                -1 * Math.round((calcLogic.rmz(state.KapitalzinsDerFinazierendenBank/100, state.Finanzierungszeitraum, state.InvestitionLautAnbieter, 0,0) * (-1) + calcLogic.preisteigungsFunktion(state.BetriebsstundenBHKW * state.Vollwartung, state.PreissteigerungenWartungProA, 8) + complicatedData("VollrevisionDaten", state)[8] + calcLogic.preisteigungsFunktion((state.BasisgaspreisInklAllerAbgabenNetto * checkIfDefined(bhkwState[state.elektrischeLeistung].brennstoffleistungKWHi * state.BetriebsstundenBHKW/1000 * 1.107, true)), state.SteigerungErdgasProA, 8) + calcLogic.preisteigungsFunktion(state.BasisgaspreisInklAllerAbgabenNetto * calcLogic.brennstoffeinsatzImKessel(checkIfDefined(bhkwState[state.elektrischeLeistung].thermischeLeistung*state.BetriebsstundenBHKW/1000), checkIfDefined(state.GesamtbedarfErdgasFürHeizungUndWarmwasser/(1.107/state.JahresanlagennutzungsgradWärmeerzeuger * 100)), state.JahresanlagennutzungsgradWärmeerzeuger), state.SteigerungErdgasProA, 8) + calcLogic.preisteigungsFunktion((checkIfDefined((state.DurchschnittspreisBezug + state.Stromsteuer + state.EEGUmlage + state.KWKAufschlagCa + state.SonstigeAbgaben) * 10) * calcLogic.summeReststrombezug(state.GesamtbedarfStrom, checkIfDefined(state.elektrischeLeistung*state.BetriebsstundenBHKW/1000), checkIfDefined((state.elektrischeLeistung*state.BetriebsstundenBHKW/1000) * state.DavonInsNetzEingespeist/100))), state.SteigerungStromProA, 8) + calcLogic.preisteigungsFunktion(state.Erdgasgrundpreis, state.SteigerungErdgasProA, 8) + calcLogic.EEGOutput(state.EEGUmlage, checkIfDefined(state.elektrischeLeistung*state.BetriebsstundenBHKW/1000), checkIfDefined((state.elektrischeLeistung*state.BetriebsstundenBHKW/1000) * state.DavonInsNetzEingespeist/100), state.AnteilEEGUmlageEigenstrom) + calcLogic.rückerstattungErdgassteuer(checkIfDefined(bhkwState[state.elektrischeLeistung].brennstoffleistungKWHi * state.BetriebsstundenBHKW/1000 * 1.107, true), state.ErdgassteuerRückerstattung) - checkIfDefined((state.elektrischeLeistung*state.BetriebsstundenBHKW/1000) * state.DavonInsNetzEingespeist/100) * checkIfDefined(state.EEXVergütungInklVermNetznutzung) + checkIfDefined(calcLogic.emissionenC7(calcLogic.brennstoffeinsatzImKessel(checkIfDefined(bhkwState[state.elektrischeLeistung].thermischeLeistung*state.BetriebsstundenBHKW/1000), checkIfDefined(state.GesamtbedarfErdgasFürHeizungUndWarmwasser/(1.107/state.JahresanlagennutzungsgradWärmeerzeuger * 100)), state.JahresanlagennutzungsgradWärmeerzeuger), checkIfDefined(bhkwState[state.elektrischeLeistung].brennstoffleistungKWHi * state.BetriebsstundenBHKW/1000 * 1.107, true))) * 55 +   calcLogic.kwkSpecial(calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 3500, 8),  calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 5000, 1) + calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 5000, 2) + calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 4000, 3) + calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 4000, 4) + calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 3500, 5) + calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 3500, 6) + calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 3500, 7) + calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 3500, 8), calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 5000, 1) + calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 5000, 2) + calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 4000, 3) + calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 4000, 4) + calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 3500, 5) + calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 3500, 6) + calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 3500, 7) + calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 3500, 8) + calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 3500, 9),  calcLogic.kwkSpecial(calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 3500, 7), calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 5000, 1) + calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 5000, 2) + calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 4000, 3) + calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 4000, 4) + calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 3500, 5) + calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 3500, 6) + calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 3500, 7),  calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 5000, 1) + calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 5000, 2) + calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 4000, 3) + calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 4000, 4) + calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 3500, 5) + calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 3500, 6) + calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 3500, 7) + calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 3500, 8), calcLogic.kwkBonus(state.elektrischeLeistung, calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 3500, 7), checkIfValid(state.BetriebsstundenBHKW * 1), 3500, checkIfDefined((state.elektrischeLeistung*state.BetriebsstundenBHKW/1000) * state.DavonInsNetzEingespeist/100), checkIfDefined(state.elektrischeLeistung*state.BetriebsstundenBHKW/1000))))) - (calcLogic.produktPreisteigerung(state.GesamtbedarfErdgasFürHeizungUndWarmwasser, state.BasisgaspreisInklAllerAbgabenNetto, state.SteigerungErdgasProA, 8) + calcLogic.produktPreisteigerung(state.GesamtbedarfStrom, checkIfDefined((state.DurchschnittspreisBezug + state.Stromsteuer + state.EEGUmlage + state.KWKAufschlagCa + state.SonstigeAbgaben) * 10), state.SteigerungStromProA, 8) + calcLogic.preisteigungsFunktion(state.Erdgasgrundpreis, state.SteigerungErdgasProA, 8) + Math.round( calcLogic.emissionenB7(state.GesamtbedarfErdgasFürHeizungUndWarmwasser) * 55))),
            ]} />
            <StaticAndDynamicOutputRow rowName="" bgColor="bg-gray-200" valueArray={[
                " "," "," "," "," "," "," "," "," "
            ]}/>
            <StaticAndDynamicOutputRow highlitedCol={highlitedCol} bgColor={"bg-green-500 border-b-2"} bold={true} rowName="Ergebnis über Gesamtlaufzeit [€/a]" valueArray={[
               -1 * Math.round([
                    (calcLogic.rmz(state.KapitalzinsDerFinazierendenBank/100, state.Finanzierungszeitraum, state.InvestitionLautAnbieter, 0,0) * (-1) + calcLogic.preisteigungsFunktion(state.BetriebsstundenBHKW * state.Vollwartung, state.PreissteigerungenWartungProA, 0) + complicatedData("VollrevisionDaten", state)[0] + calcLogic.preisteigungsFunktion((state.BasisgaspreisInklAllerAbgabenNetto * checkIfDefined(bhkwState[state.elektrischeLeistung].brennstoffleistungKWHi * state.BetriebsstundenBHKW/1000 * 1.107, true)), state.SteigerungErdgasProA, 0) + calcLogic.preisteigungsFunktion(state.BasisgaspreisInklAllerAbgabenNetto * calcLogic.brennstoffeinsatzImKessel(checkIfDefined(bhkwState[state.elektrischeLeistung].thermischeLeistung*state.BetriebsstundenBHKW/1000), checkIfDefined(state.GesamtbedarfErdgasFürHeizungUndWarmwasser/(1.107/state.JahresanlagennutzungsgradWärmeerzeuger * 100)), state.JahresanlagennutzungsgradWärmeerzeuger), state.SteigerungErdgasProA, 0) + calcLogic.preisteigungsFunktion((checkIfDefined((state.DurchschnittspreisBezug + state.Stromsteuer + state.EEGUmlage + state.KWKAufschlagCa + state.SonstigeAbgaben) * 10) * calcLogic.summeReststrombezug(state.GesamtbedarfStrom, checkIfDefined(state.elektrischeLeistung*state.BetriebsstundenBHKW/1000), checkIfDefined((state.elektrischeLeistung*state.BetriebsstundenBHKW/1000) * state.DavonInsNetzEingespeist/100))), state.SteigerungStromProA, 0) + calcLogic.preisteigungsFunktion(state.Erdgasgrundpreis, state.SteigerungErdgasProA, 0) + calcLogic.EEGOutput(state.EEGUmlage, checkIfDefined(state.elektrischeLeistung*state.BetriebsstundenBHKW/1000), checkIfDefined((state.elektrischeLeistung*state.BetriebsstundenBHKW/1000) * state.DavonInsNetzEingespeist/100), state.AnteilEEGUmlageEigenstrom) + calcLogic.rückerstattungErdgassteuer(checkIfDefined(bhkwState[state.elektrischeLeistung].brennstoffleistungKWHi * state.BetriebsstundenBHKW/1000 * 1.107, true), state.ErdgassteuerRückerstattung) - checkIfDefined((state.elektrischeLeistung*state.BetriebsstundenBHKW/1000) * state.DavonInsNetzEingespeist/100) * checkIfDefined(state.EEXVergütungInklVermNetznutzung) + checkIfDefined(calcLogic.emissionenC7(calcLogic.brennstoffeinsatzImKessel(checkIfDefined(bhkwState[state.elektrischeLeistung].thermischeLeistung*state.BetriebsstundenBHKW/1000), checkIfDefined(state.GesamtbedarfErdgasFürHeizungUndWarmwasser/(1.107/state.JahresanlagennutzungsgradWärmeerzeuger * 100)), state.JahresanlagennutzungsgradWärmeerzeuger), checkIfDefined(bhkwState[state.elektrischeLeistung].brennstoffleistungKWHi * state.BetriebsstundenBHKW/1000 * 1.107, true))) * 25 + calcLogic.kwkBonus(state.elektrischeLeistung, calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 5000, 1), checkIfValid(state.BetriebsstundenBHKW * 1), 5000, checkIfDefined((state.elektrischeLeistung*state.BetriebsstundenBHKW/1000) * state.DavonInsNetzEingespeist/100), checkIfDefined(state.elektrischeLeistung*state.BetriebsstundenBHKW/1000))) - (calcLogic.produktPreisteigerung(state.GesamtbedarfErdgasFürHeizungUndWarmwasser, state.BasisgaspreisInklAllerAbgabenNetto, state.SteigerungErdgasProA, 0) + calcLogic.produktPreisteigerung(state.GesamtbedarfStrom, checkIfDefined((state.DurchschnittspreisBezug + state.Stromsteuer + state.EEGUmlage + state.KWKAufschlagCa + state.SonstigeAbgaben) * 10), state.SteigerungStromProA, 0) + calcLogic.preisteigungsFunktion(state.Erdgasgrundpreis, state.SteigerungErdgasProA, 0) + Math.round( calcLogic.emissionenB7(state.GesamtbedarfErdgasFürHeizungUndWarmwasser) * 25)),
                    (calcLogic.rmz(state.KapitalzinsDerFinazierendenBank/100, state.Finanzierungszeitraum, state.InvestitionLautAnbieter, 0,0) * (-1) + calcLogic.preisteigungsFunktion(state.BetriebsstundenBHKW * state.Vollwartung, state.PreissteigerungenWartungProA, 1) + complicatedData("VollrevisionDaten", state)[1] + calcLogic.preisteigungsFunktion((state.BasisgaspreisInklAllerAbgabenNetto * checkIfDefined(bhkwState[state.elektrischeLeistung].brennstoffleistungKWHi * state.BetriebsstundenBHKW/1000 * 1.107, true)), state.SteigerungErdgasProA, 1) + calcLogic.preisteigungsFunktion(state.BasisgaspreisInklAllerAbgabenNetto * calcLogic.brennstoffeinsatzImKessel(checkIfDefined(bhkwState[state.elektrischeLeistung].thermischeLeistung*state.BetriebsstundenBHKW/1000), checkIfDefined(state.GesamtbedarfErdgasFürHeizungUndWarmwasser/(1.107/state.JahresanlagennutzungsgradWärmeerzeuger * 100)), state.JahresanlagennutzungsgradWärmeerzeuger), state.SteigerungErdgasProA, 1) + calcLogic.preisteigungsFunktion((checkIfDefined((state.DurchschnittspreisBezug + state.Stromsteuer + state.EEGUmlage + state.KWKAufschlagCa + state.SonstigeAbgaben) * 10) * calcLogic.summeReststrombezug(state.GesamtbedarfStrom, checkIfDefined(state.elektrischeLeistung*state.BetriebsstundenBHKW/1000), checkIfDefined((state.elektrischeLeistung*state.BetriebsstundenBHKW/1000) * state.DavonInsNetzEingespeist/100))), state.SteigerungStromProA, 1) + calcLogic.preisteigungsFunktion(state.Erdgasgrundpreis, state.SteigerungErdgasProA, 1) + calcLogic.EEGOutput(state.EEGUmlage, checkIfDefined(state.elektrischeLeistung*state.BetriebsstundenBHKW/1000), checkIfDefined((state.elektrischeLeistung*state.BetriebsstundenBHKW/1000) * state.DavonInsNetzEingespeist/100), state.AnteilEEGUmlageEigenstrom) + calcLogic.rückerstattungErdgassteuer(checkIfDefined(bhkwState[state.elektrischeLeistung].brennstoffleistungKWHi * state.BetriebsstundenBHKW/1000 * 1.107, true), state.ErdgassteuerRückerstattung) - checkIfDefined((state.elektrischeLeistung*state.BetriebsstundenBHKW/1000) * state.DavonInsNetzEingespeist/100) * checkIfDefined(state.EEXVergütungInklVermNetznutzung) + checkIfDefined(calcLogic.emissionenC7(calcLogic.brennstoffeinsatzImKessel(checkIfDefined(bhkwState[state.elektrischeLeistung].thermischeLeistung*state.BetriebsstundenBHKW/1000), checkIfDefined(state.GesamtbedarfErdgasFürHeizungUndWarmwasser/(1.107/state.JahresanlagennutzungsgradWärmeerzeuger * 100)), state.JahresanlagennutzungsgradWärmeerzeuger), checkIfDefined(bhkwState[state.elektrischeLeistung].brennstoffleistungKWHi * state.BetriebsstundenBHKW/1000 * 1.107, true))) * 30 + calcLogic.kwkBonus(state.elektrischeLeistung, calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 5000, 2), checkIfValid(state.BetriebsstundenBHKW * 1), 5000, checkIfDefined((state.elektrischeLeistung*state.BetriebsstundenBHKW/1000) * state.DavonInsNetzEingespeist/100), checkIfDefined(state.elektrischeLeistung*state.BetriebsstundenBHKW/1000))) - (calcLogic.produktPreisteigerung(state.GesamtbedarfErdgasFürHeizungUndWarmwasser, state.BasisgaspreisInklAllerAbgabenNetto, state.SteigerungErdgasProA, 1) + calcLogic.produktPreisteigerung(state.GesamtbedarfStrom, checkIfDefined((state.DurchschnittspreisBezug + state.Stromsteuer + state.EEGUmlage + state.KWKAufschlagCa + state.SonstigeAbgaben) * 10), state.SteigerungStromProA, 1) + calcLogic.preisteigungsFunktion(state.Erdgasgrundpreis, state.SteigerungErdgasProA, 1) + Math.round( calcLogic.emissionenB7(state.GesamtbedarfErdgasFürHeizungUndWarmwasser) * 30)),
                    (calcLogic.rmz(state.KapitalzinsDerFinazierendenBank/100, state.Finanzierungszeitraum, state.InvestitionLautAnbieter, 0,0) * (-1) + calcLogic.preisteigungsFunktion(state.BetriebsstundenBHKW * state.Vollwartung, state.PreissteigerungenWartungProA, 2) + complicatedData("VollrevisionDaten", state)[2] + calcLogic.preisteigungsFunktion((state.BasisgaspreisInklAllerAbgabenNetto * checkIfDefined(bhkwState[state.elektrischeLeistung].brennstoffleistungKWHi * state.BetriebsstundenBHKW/1000 * 1.107, true)), state.SteigerungErdgasProA, 2) + calcLogic.preisteigungsFunktion(state.BasisgaspreisInklAllerAbgabenNetto * calcLogic.brennstoffeinsatzImKessel(checkIfDefined(bhkwState[state.elektrischeLeistung].thermischeLeistung*state.BetriebsstundenBHKW/1000), checkIfDefined(state.GesamtbedarfErdgasFürHeizungUndWarmwasser/(1.107/state.JahresanlagennutzungsgradWärmeerzeuger * 100)), state.JahresanlagennutzungsgradWärmeerzeuger), state.SteigerungErdgasProA, 2) + calcLogic.preisteigungsFunktion((checkIfDefined((state.DurchschnittspreisBezug + state.Stromsteuer + state.EEGUmlage + state.KWKAufschlagCa + state.SonstigeAbgaben) * 10) * calcLogic.summeReststrombezug(state.GesamtbedarfStrom, checkIfDefined(state.elektrischeLeistung*state.BetriebsstundenBHKW/1000), checkIfDefined((state.elektrischeLeistung*state.BetriebsstundenBHKW/1000) * state.DavonInsNetzEingespeist/100))), state.SteigerungStromProA, 2) + calcLogic.preisteigungsFunktion(state.Erdgasgrundpreis, state.SteigerungErdgasProA, 2) + calcLogic.EEGOutput(state.EEGUmlage, checkIfDefined(state.elektrischeLeistung*state.BetriebsstundenBHKW/1000), checkIfDefined((state.elektrischeLeistung*state.BetriebsstundenBHKW/1000) * state.DavonInsNetzEingespeist/100), state.AnteilEEGUmlageEigenstrom) + calcLogic.rückerstattungErdgassteuer(checkIfDefined(bhkwState[state.elektrischeLeistung].brennstoffleistungKWHi * state.BetriebsstundenBHKW/1000 * 1.107, true), state.ErdgassteuerRückerstattung) - checkIfDefined((state.elektrischeLeistung*state.BetriebsstundenBHKW/1000) * state.DavonInsNetzEingespeist/100) * checkIfDefined(state.EEXVergütungInklVermNetznutzung) + checkIfDefined(calcLogic.emissionenC7(calcLogic.brennstoffeinsatzImKessel(checkIfDefined(bhkwState[state.elektrischeLeistung].thermischeLeistung*state.BetriebsstundenBHKW/1000), checkIfDefined(state.GesamtbedarfErdgasFürHeizungUndWarmwasser/(1.107/state.JahresanlagennutzungsgradWärmeerzeuger * 100)), state.JahresanlagennutzungsgradWärmeerzeuger), checkIfDefined(bhkwState[state.elektrischeLeistung].brennstoffleistungKWHi * state.BetriebsstundenBHKW/1000 * 1.107, true))) * 35 + calcLogic.kwkBonus(state.elektrischeLeistung, calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 4000, 3), checkIfValid(state.BetriebsstundenBHKW * 1), 4000, checkIfDefined((state.elektrischeLeistung*state.BetriebsstundenBHKW/1000) * state.DavonInsNetzEingespeist/100), checkIfDefined(state.elektrischeLeistung*state.BetriebsstundenBHKW/1000))) - (calcLogic.produktPreisteigerung(state.GesamtbedarfErdgasFürHeizungUndWarmwasser, state.BasisgaspreisInklAllerAbgabenNetto, state.SteigerungErdgasProA, 2) + calcLogic.produktPreisteigerung(state.GesamtbedarfStrom, checkIfDefined((state.DurchschnittspreisBezug + state.Stromsteuer + state.EEGUmlage + state.KWKAufschlagCa + state.SonstigeAbgaben) * 10), state.SteigerungStromProA, 2) + calcLogic.preisteigungsFunktion(state.Erdgasgrundpreis, state.SteigerungErdgasProA, 2) + Math.round( calcLogic.emissionenB7(state.GesamtbedarfErdgasFürHeizungUndWarmwasser) * 35)),
                    (calcLogic.rmz(state.KapitalzinsDerFinazierendenBank/100, state.Finanzierungszeitraum, state.InvestitionLautAnbieter, 0,0) * (-1) + calcLogic.preisteigungsFunktion(state.BetriebsstundenBHKW * state.Vollwartung, state.PreissteigerungenWartungProA, 3) + complicatedData("VollrevisionDaten", state)[3] + calcLogic.preisteigungsFunktion((state.BasisgaspreisInklAllerAbgabenNetto * checkIfDefined(bhkwState[state.elektrischeLeistung].brennstoffleistungKWHi * state.BetriebsstundenBHKW/1000 * 1.107, true)), state.SteigerungErdgasProA, 3) + calcLogic.preisteigungsFunktion(state.BasisgaspreisInklAllerAbgabenNetto * calcLogic.brennstoffeinsatzImKessel(checkIfDefined(bhkwState[state.elektrischeLeistung].thermischeLeistung*state.BetriebsstundenBHKW/1000), checkIfDefined(state.GesamtbedarfErdgasFürHeizungUndWarmwasser/(1.107/state.JahresanlagennutzungsgradWärmeerzeuger * 100)), state.JahresanlagennutzungsgradWärmeerzeuger), state.SteigerungErdgasProA, 3) + calcLogic.preisteigungsFunktion((checkIfDefined((state.DurchschnittspreisBezug + state.Stromsteuer + state.EEGUmlage + state.KWKAufschlagCa + state.SonstigeAbgaben) * 10) * calcLogic.summeReststrombezug(state.GesamtbedarfStrom, checkIfDefined(state.elektrischeLeistung*state.BetriebsstundenBHKW/1000), checkIfDefined((state.elektrischeLeistung*state.BetriebsstundenBHKW/1000) * state.DavonInsNetzEingespeist/100))), state.SteigerungStromProA, 3) + calcLogic.preisteigungsFunktion(state.Erdgasgrundpreis, state.SteigerungErdgasProA, 3) + calcLogic.EEGOutput(state.EEGUmlage, checkIfDefined(state.elektrischeLeistung*state.BetriebsstundenBHKW/1000), checkIfDefined((state.elektrischeLeistung*state.BetriebsstundenBHKW/1000) * state.DavonInsNetzEingespeist/100), state.AnteilEEGUmlageEigenstrom) + calcLogic.rückerstattungErdgassteuer(checkIfDefined(bhkwState[state.elektrischeLeistung].brennstoffleistungKWHi * state.BetriebsstundenBHKW/1000 * 1.107, true), state.ErdgassteuerRückerstattung) - checkIfDefined((state.elektrischeLeistung*state.BetriebsstundenBHKW/1000) * state.DavonInsNetzEingespeist/100) * checkIfDefined(state.EEXVergütungInklVermNetznutzung) + checkIfDefined(calcLogic.emissionenC7(calcLogic.brennstoffeinsatzImKessel(checkIfDefined(bhkwState[state.elektrischeLeistung].thermischeLeistung*state.BetriebsstundenBHKW/1000), checkIfDefined(state.GesamtbedarfErdgasFürHeizungUndWarmwasser/(1.107/state.JahresanlagennutzungsgradWärmeerzeuger * 100)), state.JahresanlagennutzungsgradWärmeerzeuger), checkIfDefined(bhkwState[state.elektrischeLeistung].brennstoffleistungKWHi * state.BetriebsstundenBHKW/1000 * 1.107, true))) * 45 + calcLogic.kwkBonus(state.elektrischeLeistung, calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 4000, 4), checkIfValid(state.BetriebsstundenBHKW * 1), 4000, checkIfDefined((state.elektrischeLeistung*state.BetriebsstundenBHKW/1000) * state.DavonInsNetzEingespeist/100), checkIfDefined(state.elektrischeLeistung*state.BetriebsstundenBHKW/1000))) - (calcLogic.produktPreisteigerung(state.GesamtbedarfErdgasFürHeizungUndWarmwasser, state.BasisgaspreisInklAllerAbgabenNetto, state.SteigerungErdgasProA, 3) + calcLogic.produktPreisteigerung(state.GesamtbedarfStrom, checkIfDefined((state.DurchschnittspreisBezug + state.Stromsteuer + state.EEGUmlage + state.KWKAufschlagCa + state.SonstigeAbgaben) * 10), state.SteigerungStromProA, 3) + calcLogic.preisteigungsFunktion(state.Erdgasgrundpreis, state.SteigerungErdgasProA, 3) + Math.round( calcLogic.emissionenB7(state.GesamtbedarfErdgasFürHeizungUndWarmwasser) * 45)),
                    (calcLogic.rmz(state.KapitalzinsDerFinazierendenBank/100, state.Finanzierungszeitraum, state.InvestitionLautAnbieter, 0,0) * (-1) + calcLogic.preisteigungsFunktion(state.BetriebsstundenBHKW * state.Vollwartung, state.PreissteigerungenWartungProA, 4) + complicatedData("VollrevisionDaten", state)[4] + calcLogic.preisteigungsFunktion((state.BasisgaspreisInklAllerAbgabenNetto * checkIfDefined(bhkwState[state.elektrischeLeistung].brennstoffleistungKWHi * state.BetriebsstundenBHKW/1000 * 1.107, true)), state.SteigerungErdgasProA, 4) + calcLogic.preisteigungsFunktion(state.BasisgaspreisInklAllerAbgabenNetto * calcLogic.brennstoffeinsatzImKessel(checkIfDefined(bhkwState[state.elektrischeLeistung].thermischeLeistung*state.BetriebsstundenBHKW/1000), checkIfDefined(state.GesamtbedarfErdgasFürHeizungUndWarmwasser/(1.107/state.JahresanlagennutzungsgradWärmeerzeuger * 100)), state.JahresanlagennutzungsgradWärmeerzeuger), state.SteigerungErdgasProA, 4) + calcLogic.preisteigungsFunktion((checkIfDefined((state.DurchschnittspreisBezug + state.Stromsteuer + state.EEGUmlage + state.KWKAufschlagCa + state.SonstigeAbgaben) * 10) * calcLogic.summeReststrombezug(state.GesamtbedarfStrom, checkIfDefined(state.elektrischeLeistung*state.BetriebsstundenBHKW/1000), checkIfDefined((state.elektrischeLeistung*state.BetriebsstundenBHKW/1000) * state.DavonInsNetzEingespeist/100))), state.SteigerungStromProA, 4) + calcLogic.preisteigungsFunktion(state.Erdgasgrundpreis, state.SteigerungErdgasProA, 4) + calcLogic.EEGOutput(state.EEGUmlage, checkIfDefined(state.elektrischeLeistung*state.BetriebsstundenBHKW/1000), checkIfDefined((state.elektrischeLeistung*state.BetriebsstundenBHKW/1000) * state.DavonInsNetzEingespeist/100), state.AnteilEEGUmlageEigenstrom) + calcLogic.rückerstattungErdgassteuer(checkIfDefined(bhkwState[state.elektrischeLeistung].brennstoffleistungKWHi * state.BetriebsstundenBHKW/1000 * 1.107, true), state.ErdgassteuerRückerstattung) - checkIfDefined((state.elektrischeLeistung*state.BetriebsstundenBHKW/1000) * state.DavonInsNetzEingespeist/100) * checkIfDefined(state.EEXVergütungInklVermNetznutzung) + checkIfDefined(calcLogic.emissionenC7(calcLogic.brennstoffeinsatzImKessel(checkIfDefined(bhkwState[state.elektrischeLeistung].thermischeLeistung*state.BetriebsstundenBHKW/1000), checkIfDefined(state.GesamtbedarfErdgasFürHeizungUndWarmwasser/(1.107/state.JahresanlagennutzungsgradWärmeerzeuger * 100)), state.JahresanlagennutzungsgradWärmeerzeuger), checkIfDefined(bhkwState[state.elektrischeLeistung].brennstoffleistungKWHi * state.BetriebsstundenBHKW/1000 * 1.107, true))) * 55 + calcLogic.kwkBonus(state.elektrischeLeistung, calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 3500, 5), checkIfValid(state.BetriebsstundenBHKW * 1), 3500, checkIfDefined((state.elektrischeLeistung*state.BetriebsstundenBHKW/1000) * state.DavonInsNetzEingespeist/100), checkIfDefined(state.elektrischeLeistung*state.BetriebsstundenBHKW/1000))) - (calcLogic.produktPreisteigerung(state.GesamtbedarfErdgasFürHeizungUndWarmwasser, state.BasisgaspreisInklAllerAbgabenNetto, state.SteigerungErdgasProA, 4) + calcLogic.produktPreisteigerung(state.GesamtbedarfStrom, checkIfDefined((state.DurchschnittspreisBezug + state.Stromsteuer + state.EEGUmlage + state.KWKAufschlagCa + state.SonstigeAbgaben) * 10), state.SteigerungStromProA, 4) + calcLogic.preisteigungsFunktion(state.Erdgasgrundpreis, state.SteigerungErdgasProA, 4) + Math.round( calcLogic.emissionenB7(state.GesamtbedarfErdgasFürHeizungUndWarmwasser) * 55)),
                    (calcLogic.rmz(state.KapitalzinsDerFinazierendenBank/100, state.Finanzierungszeitraum, state.InvestitionLautAnbieter, 0,0) * (-1) + calcLogic.preisteigungsFunktion(state.BetriebsstundenBHKW * state.Vollwartung, state.PreissteigerungenWartungProA, 5) + complicatedData("VollrevisionDaten", state)[5] + calcLogic.preisteigungsFunktion((state.BasisgaspreisInklAllerAbgabenNetto * checkIfDefined(bhkwState[state.elektrischeLeistung].brennstoffleistungKWHi * state.BetriebsstundenBHKW/1000 * 1.107, true)), state.SteigerungErdgasProA, 5) + calcLogic.preisteigungsFunktion(state.BasisgaspreisInklAllerAbgabenNetto * calcLogic.brennstoffeinsatzImKessel(checkIfDefined(bhkwState[state.elektrischeLeistung].thermischeLeistung*state.BetriebsstundenBHKW/1000), checkIfDefined(state.GesamtbedarfErdgasFürHeizungUndWarmwasser/(1.107/state.JahresanlagennutzungsgradWärmeerzeuger * 100)), state.JahresanlagennutzungsgradWärmeerzeuger), state.SteigerungErdgasProA, 5) + calcLogic.preisteigungsFunktion((checkIfDefined((state.DurchschnittspreisBezug + state.Stromsteuer + state.EEGUmlage + state.KWKAufschlagCa + state.SonstigeAbgaben) * 10) * calcLogic.summeReststrombezug(state.GesamtbedarfStrom, checkIfDefined(state.elektrischeLeistung*state.BetriebsstundenBHKW/1000), checkIfDefined((state.elektrischeLeistung*state.BetriebsstundenBHKW/1000) * state.DavonInsNetzEingespeist/100))), state.SteigerungStromProA, 5) + calcLogic.preisteigungsFunktion(state.Erdgasgrundpreis, state.SteigerungErdgasProA, 5) + calcLogic.EEGOutput(state.EEGUmlage, checkIfDefined(state.elektrischeLeistung*state.BetriebsstundenBHKW/1000), checkIfDefined((state.elektrischeLeistung*state.BetriebsstundenBHKW/1000) * state.DavonInsNetzEingespeist/100), state.AnteilEEGUmlageEigenstrom) + calcLogic.rückerstattungErdgassteuer(checkIfDefined(bhkwState[state.elektrischeLeistung].brennstoffleistungKWHi * state.BetriebsstundenBHKW/1000 * 1.107, true), state.ErdgassteuerRückerstattung) - checkIfDefined((state.elektrischeLeistung*state.BetriebsstundenBHKW/1000) * state.DavonInsNetzEingespeist/100) * checkIfDefined(state.EEXVergütungInklVermNetznutzung) + checkIfDefined(calcLogic.emissionenC7(calcLogic.brennstoffeinsatzImKessel(checkIfDefined(bhkwState[state.elektrischeLeistung].thermischeLeistung*state.BetriebsstundenBHKW/1000), checkIfDefined(state.GesamtbedarfErdgasFürHeizungUndWarmwasser/(1.107/state.JahresanlagennutzungsgradWärmeerzeuger * 100)), state.JahresanlagennutzungsgradWärmeerzeuger), checkIfDefined(bhkwState[state.elektrischeLeistung].brennstoffleistungKWHi * state.BetriebsstundenBHKW/1000 * 1.107, true))) * 55 + calcLogic.kwkBonus(state.elektrischeLeistung, calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 3500, 6), checkIfValid(state.BetriebsstundenBHKW * 1), 3500, checkIfDefined((state.elektrischeLeistung*state.BetriebsstundenBHKW/1000) * state.DavonInsNetzEingespeist/100), checkIfDefined(state.elektrischeLeistung*state.BetriebsstundenBHKW/1000))) - (calcLogic.produktPreisteigerung(state.GesamtbedarfErdgasFürHeizungUndWarmwasser, state.BasisgaspreisInklAllerAbgabenNetto, state.SteigerungErdgasProA, 5) + calcLogic.produktPreisteigerung(state.GesamtbedarfStrom, checkIfDefined((state.DurchschnittspreisBezug + state.Stromsteuer + state.EEGUmlage + state.KWKAufschlagCa + state.SonstigeAbgaben) * 10), state.SteigerungStromProA, 5) + calcLogic.preisteigungsFunktion(state.Erdgasgrundpreis, state.SteigerungErdgasProA, 5) + Math.round( calcLogic.emissionenB7(state.GesamtbedarfErdgasFürHeizungUndWarmwasser) * 55)),
                    (calcLogic.rmz(state.KapitalzinsDerFinazierendenBank/100, state.Finanzierungszeitraum, state.InvestitionLautAnbieter, 0,0) * (-1) + calcLogic.preisteigungsFunktion(state.BetriebsstundenBHKW * state.Vollwartung, state.PreissteigerungenWartungProA, 6) + complicatedData("VollrevisionDaten", state)[6] + calcLogic.preisteigungsFunktion((state.BasisgaspreisInklAllerAbgabenNetto * checkIfDefined(bhkwState[state.elektrischeLeistung].brennstoffleistungKWHi * state.BetriebsstundenBHKW/1000 * 1.107, true)), state.SteigerungErdgasProA, 6) + calcLogic.preisteigungsFunktion(state.BasisgaspreisInklAllerAbgabenNetto * calcLogic.brennstoffeinsatzImKessel(checkIfDefined(bhkwState[state.elektrischeLeistung].thermischeLeistung*state.BetriebsstundenBHKW/1000), checkIfDefined(state.GesamtbedarfErdgasFürHeizungUndWarmwasser/(1.107/state.JahresanlagennutzungsgradWärmeerzeuger * 100)), state.JahresanlagennutzungsgradWärmeerzeuger), state.SteigerungErdgasProA, 6) + calcLogic.preisteigungsFunktion((checkIfDefined((state.DurchschnittspreisBezug + state.Stromsteuer + state.EEGUmlage + state.KWKAufschlagCa + state.SonstigeAbgaben) * 10) * calcLogic.summeReststrombezug(state.GesamtbedarfStrom, checkIfDefined(state.elektrischeLeistung*state.BetriebsstundenBHKW/1000), checkIfDefined((state.elektrischeLeistung*state.BetriebsstundenBHKW/1000) * state.DavonInsNetzEingespeist/100))), state.SteigerungStromProA, 6) + calcLogic.preisteigungsFunktion(state.Erdgasgrundpreis, state.SteigerungErdgasProA, 6) + calcLogic.EEGOutput(state.EEGUmlage, checkIfDefined(state.elektrischeLeistung*state.BetriebsstundenBHKW/1000), checkIfDefined((state.elektrischeLeistung*state.BetriebsstundenBHKW/1000) * state.DavonInsNetzEingespeist/100), state.AnteilEEGUmlageEigenstrom) + calcLogic.rückerstattungErdgassteuer(checkIfDefined(bhkwState[state.elektrischeLeistung].brennstoffleistungKWHi * state.BetriebsstundenBHKW/1000 * 1.107, true), state.ErdgassteuerRückerstattung) - checkIfDefined((state.elektrischeLeistung*state.BetriebsstundenBHKW/1000) * state.DavonInsNetzEingespeist/100) * checkIfDefined(state.EEXVergütungInklVermNetznutzung) + checkIfDefined(calcLogic.emissionenC7(calcLogic.brennstoffeinsatzImKessel(checkIfDefined(bhkwState[state.elektrischeLeistung].thermischeLeistung*state.BetriebsstundenBHKW/1000), checkIfDefined(state.GesamtbedarfErdgasFürHeizungUndWarmwasser/(1.107/state.JahresanlagennutzungsgradWärmeerzeuger * 100)), state.JahresanlagennutzungsgradWärmeerzeuger), checkIfDefined(bhkwState[state.elektrischeLeistung].brennstoffleistungKWHi * state.BetriebsstundenBHKW/1000 * 1.107, true))) * 55 + calcLogic.kwkBonus(state.elektrischeLeistung, calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 3500, 7), checkIfValid(state.BetriebsstundenBHKW * 1), 3500, checkIfDefined((state.elektrischeLeistung*state.BetriebsstundenBHKW/1000) * state.DavonInsNetzEingespeist/100), checkIfDefined(state.elektrischeLeistung*state.BetriebsstundenBHKW/1000))) - (calcLogic.produktPreisteigerung(state.GesamtbedarfErdgasFürHeizungUndWarmwasser, state.BasisgaspreisInklAllerAbgabenNetto, state.SteigerungErdgasProA, 6) + calcLogic.produktPreisteigerung(state.GesamtbedarfStrom, checkIfDefined((state.DurchschnittspreisBezug + state.Stromsteuer + state.EEGUmlage + state.KWKAufschlagCa + state.SonstigeAbgaben) * 10), state.SteigerungStromProA, 6) + calcLogic.preisteigungsFunktion(state.Erdgasgrundpreis, state.SteigerungErdgasProA, 6) + Math.round( calcLogic.emissionenB7(state.GesamtbedarfErdgasFürHeizungUndWarmwasser) * 55)),
                    (calcLogic.rmz(state.KapitalzinsDerFinazierendenBank/100, state.Finanzierungszeitraum, state.InvestitionLautAnbieter, 0,0) * (-1) + calcLogic.preisteigungsFunktion(state.BetriebsstundenBHKW * state.Vollwartung, state.PreissteigerungenWartungProA, 7) + complicatedData("VollrevisionDaten", state)[7] + calcLogic.preisteigungsFunktion((state.BasisgaspreisInklAllerAbgabenNetto * checkIfDefined(bhkwState[state.elektrischeLeistung].brennstoffleistungKWHi * state.BetriebsstundenBHKW/1000 * 1.107, true)), state.SteigerungErdgasProA, 7) + calcLogic.preisteigungsFunktion(state.BasisgaspreisInklAllerAbgabenNetto * calcLogic.brennstoffeinsatzImKessel(checkIfDefined(bhkwState[state.elektrischeLeistung].thermischeLeistung*state.BetriebsstundenBHKW/1000), checkIfDefined(state.GesamtbedarfErdgasFürHeizungUndWarmwasser/(1.107/state.JahresanlagennutzungsgradWärmeerzeuger * 100)), state.JahresanlagennutzungsgradWärmeerzeuger), state.SteigerungErdgasProA, 7) + calcLogic.preisteigungsFunktion((checkIfDefined((state.DurchschnittspreisBezug + state.Stromsteuer + state.EEGUmlage + state.KWKAufschlagCa + state.SonstigeAbgaben) * 10) * calcLogic.summeReststrombezug(state.GesamtbedarfStrom, checkIfDefined(state.elektrischeLeistung*state.BetriebsstundenBHKW/1000), checkIfDefined((state.elektrischeLeistung*state.BetriebsstundenBHKW/1000) * state.DavonInsNetzEingespeist/100))), state.SteigerungStromProA, 7) + calcLogic.preisteigungsFunktion(state.Erdgasgrundpreis, state.SteigerungErdgasProA, 7) + calcLogic.EEGOutput(state.EEGUmlage, checkIfDefined(state.elektrischeLeistung*state.BetriebsstundenBHKW/1000), checkIfDefined((state.elektrischeLeistung*state.BetriebsstundenBHKW/1000) * state.DavonInsNetzEingespeist/100), state.AnteilEEGUmlageEigenstrom) + calcLogic.rückerstattungErdgassteuer(checkIfDefined(bhkwState[state.elektrischeLeistung].brennstoffleistungKWHi * state.BetriebsstundenBHKW/1000 * 1.107, true), state.ErdgassteuerRückerstattung) - checkIfDefined((state.elektrischeLeistung*state.BetriebsstundenBHKW/1000) * state.DavonInsNetzEingespeist/100) * checkIfDefined(state.EEXVergütungInklVermNetznutzung) + checkIfDefined(calcLogic.emissionenC7(calcLogic.brennstoffeinsatzImKessel(checkIfDefined(bhkwState[state.elektrischeLeistung].thermischeLeistung*state.BetriebsstundenBHKW/1000), checkIfDefined(state.GesamtbedarfErdgasFürHeizungUndWarmwasser/(1.107/state.JahresanlagennutzungsgradWärmeerzeuger * 100)), state.JahresanlagennutzungsgradWärmeerzeuger), checkIfDefined(bhkwState[state.elektrischeLeistung].brennstoffleistungKWHi * state.BetriebsstundenBHKW/1000 * 1.107, true))) * 55 + calcLogic.kwkSpecial(calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 3500, 7), calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 5000, 1) + calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 5000, 2) + calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 4000, 3) + calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 4000, 4) + calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 3500, 5) + calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 3500, 6) + calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 3500, 7),  calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 5000, 1) + calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 5000, 2) + calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 4000, 3) + calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 4000, 4) + calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 3500, 5) + calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 3500, 6) + calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 3500, 7) + calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 3500, 8), calcLogic.kwkBonus(state.elektrischeLeistung, calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 3500, 7), checkIfValid(state.BetriebsstundenBHKW * 1), 3500, checkIfDefined((state.elektrischeLeistung*state.BetriebsstundenBHKW/1000) * state.DavonInsNetzEingespeist/100), checkIfDefined(state.elektrischeLeistung*state.BetriebsstundenBHKW/1000)))) - (calcLogic.produktPreisteigerung(state.GesamtbedarfErdgasFürHeizungUndWarmwasser, state.BasisgaspreisInklAllerAbgabenNetto, state.SteigerungErdgasProA, 7) + calcLogic.produktPreisteigerung(state.GesamtbedarfStrom, checkIfDefined((state.DurchschnittspreisBezug + state.Stromsteuer + state.EEGUmlage + state.KWKAufschlagCa + state.SonstigeAbgaben) * 10), state.SteigerungStromProA, 7) + calcLogic.preisteigungsFunktion(state.Erdgasgrundpreis, state.SteigerungErdgasProA, 7) + Math.round( calcLogic.emissionenB7(state.GesamtbedarfErdgasFürHeizungUndWarmwasser) * 55)),
                    (calcLogic.rmz(state.KapitalzinsDerFinazierendenBank/100, state.Finanzierungszeitraum, state.InvestitionLautAnbieter, 0,0) * (-1) + calcLogic.preisteigungsFunktion(state.BetriebsstundenBHKW * state.Vollwartung, state.PreissteigerungenWartungProA, 8) + complicatedData("VollrevisionDaten", state)[8] + calcLogic.preisteigungsFunktion((state.BasisgaspreisInklAllerAbgabenNetto * checkIfDefined(bhkwState[state.elektrischeLeistung].brennstoffleistungKWHi * state.BetriebsstundenBHKW/1000 * 1.107, true)), state.SteigerungErdgasProA, 8) + calcLogic.preisteigungsFunktion(state.BasisgaspreisInklAllerAbgabenNetto * calcLogic.brennstoffeinsatzImKessel(checkIfDefined(bhkwState[state.elektrischeLeistung].thermischeLeistung*state.BetriebsstundenBHKW/1000), checkIfDefined(state.GesamtbedarfErdgasFürHeizungUndWarmwasser/(1.107/state.JahresanlagennutzungsgradWärmeerzeuger * 100)), state.JahresanlagennutzungsgradWärmeerzeuger), state.SteigerungErdgasProA, 8) + calcLogic.preisteigungsFunktion((checkIfDefined((state.DurchschnittspreisBezug + state.Stromsteuer + state.EEGUmlage + state.KWKAufschlagCa + state.SonstigeAbgaben) * 10) * calcLogic.summeReststrombezug(state.GesamtbedarfStrom, checkIfDefined(state.elektrischeLeistung*state.BetriebsstundenBHKW/1000), checkIfDefined((state.elektrischeLeistung*state.BetriebsstundenBHKW/1000) * state.DavonInsNetzEingespeist/100))), state.SteigerungStromProA, 8) + calcLogic.preisteigungsFunktion(state.Erdgasgrundpreis, state.SteigerungErdgasProA, 8) + calcLogic.EEGOutput(state.EEGUmlage, checkIfDefined(state.elektrischeLeistung*state.BetriebsstundenBHKW/1000), checkIfDefined((state.elektrischeLeistung*state.BetriebsstundenBHKW/1000) * state.DavonInsNetzEingespeist/100), state.AnteilEEGUmlageEigenstrom) + calcLogic.rückerstattungErdgassteuer(checkIfDefined(bhkwState[state.elektrischeLeistung].brennstoffleistungKWHi * state.BetriebsstundenBHKW/1000 * 1.107, true), state.ErdgassteuerRückerstattung) - checkIfDefined((state.elektrischeLeistung*state.BetriebsstundenBHKW/1000) * state.DavonInsNetzEingespeist/100) * checkIfDefined(state.EEXVergütungInklVermNetznutzung) + checkIfDefined(calcLogic.emissionenC7(calcLogic.brennstoffeinsatzImKessel(checkIfDefined(bhkwState[state.elektrischeLeistung].thermischeLeistung*state.BetriebsstundenBHKW/1000), checkIfDefined(state.GesamtbedarfErdgasFürHeizungUndWarmwasser/(1.107/state.JahresanlagennutzungsgradWärmeerzeuger * 100)), state.JahresanlagennutzungsgradWärmeerzeuger), checkIfDefined(bhkwState[state.elektrischeLeistung].brennstoffleistungKWHi * state.BetriebsstundenBHKW/1000 * 1.107, true))) * 55 +   calcLogic.kwkSpecial(calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 3500, 8),  calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 5000, 1) + calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 5000, 2) + calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 4000, 3) + calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 4000, 4) + calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 3500, 5) + calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 3500, 6) + calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 3500, 7) + calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 3500, 8), calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 5000, 1) + calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 5000, 2) + calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 4000, 3) + calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 4000, 4) + calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 3500, 5) + calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 3500, 6) + calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 3500, 7) + calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 3500, 8) + calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 3500, 9),  calcLogic.kwkSpecial(calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 3500, 7), calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 5000, 1) + calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 5000, 2) + calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 4000, 3) + calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 4000, 4) + calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 3500, 5) + calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 3500, 6) + calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 3500, 7),  calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 5000, 1) + calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 5000, 2) + calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 4000, 3) + calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 4000, 4) + calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 3500, 5) + calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 3500, 6) + calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 3500, 7) + calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 3500, 8), calcLogic.kwkBonus(state.elektrischeLeistung, calcLogic.verbrauchteZuschlagsberechtigteBetriebsstunden(state.elektrischeLeistung, state.DavonInsNetzEingespeist, checkIfValid(state.BetriebsstundenBHKW * 1), 3500, 7), checkIfValid(state.BetriebsstundenBHKW * 1), 3500, checkIfDefined((state.elektrischeLeistung*state.BetriebsstundenBHKW/1000) * state.DavonInsNetzEingespeist/100), checkIfDefined(state.elektrischeLeistung*state.BetriebsstundenBHKW/1000))))) - (calcLogic.produktPreisteigerung(state.GesamtbedarfErdgasFürHeizungUndWarmwasser, state.BasisgaspreisInklAllerAbgabenNetto, state.SteigerungErdgasProA, 8) + calcLogic.produktPreisteigerung(state.GesamtbedarfStrom, checkIfDefined((state.DurchschnittspreisBezug + state.Stromsteuer + state.EEGUmlage + state.KWKAufschlagCa + state.SonstigeAbgaben) * 10), state.SteigerungStromProA, 8) + calcLogic.preisteigungsFunktion(state.Erdgasgrundpreis, state.SteigerungErdgasProA, 8) + Math.round( calcLogic.emissionenB7(state.GesamtbedarfErdgasFürHeizungUndWarmwasser) * 55)),
                ].reduce((pv, cv) => pv + cv, 0))
            ]} />
        </div>
    )
}

export default FinalOutputSection